"""
Can only be resolved by authenticated users.

When the condition fails, the following can be returned (following this priority):
1) `OperationInfo`/`OperationMessage` if those types are allowed at the return type
2) `null` in case the field is not mandatory (e.g. `String` or `[String]`)
3) An empty list in case the field is a list (e.g. `[String]!`)
4) An empty `Connection` in case the return type is a relay connection
2) Otherwise, an error will be raised
"""
directive @isAuthenticated repeatable on FIELD_DEFINITION

"""Can only be resolved by the COE."""
directive @isACOE repeatable on FIELD_DEFINITION

schema {
  query: Queries
  mutation: Mutations
}

type BloomsTaxonomyLevelType implements Node {
  id: GlobalID!
  name: String!
  description: String!
}

type CourseType implements Node {
  id: GlobalID!
  regulation: RegulationType!
  semester: Int!
  department: DepartmentType!
  active: Boolean!
}

input CreateTopicInput {
  lesson: Int!
  name: String!
  regulation: Int!
  programme: String!
  degree: String!
  semester: Int!
  department: String!
  subjectCode: String!
  unit: Int!
}

"""Date with time (isoformat)"""
scalar DateTime

type DegreeType implements Node {
  id: GlobalID!
  name: String!
  fullForm: String!
}

type DepartmentType implements Node {
  id: GlobalID!
  programme: ProgrammeType!
  degree: DegreeType!
  branch: String!
  branchCode: String!
  hod: UserType!
}

enum DifficultyEnum {
  DIFFICULTY_EASY
  DIFFICULTY_MEDIUM
  DIFFICULTY_HARD
}

type FacultiesHandlingType implements Node {
  id: GlobalID!
  course: CourseType!
  subject: SubjectType!
  faculties: [UserType!]!
}

"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""
scalar GlobalID @specifiedBy(url: "https://relay.dev/graphql/objectidentification.htm")

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input LessonInput {
  name: String!
  subject: Int!
  objective: String!
  outcome: String!
  outcomeBtl: [Int!]!
}

type LessonType implements Node {
  id: GlobalID!
  name: String!
  subject: SubjectType!
  objective: String!
  outcome: String!
}

input ManyToManyInput {
  add: [ID!]
  remove: [ID!]
  set: [ID!]
}

type MarkRangeType implements Node {
  id: GlobalID!
  start: Int!
  end: Int!
}

enum MonthEnum {
  MONTH_AM
  MONTH_ND
}

type Mutations {
  login(username: String!, password: String!): UserType
  logout: Boolean!
  createNewUser(firstName: String!, lastName: String!, email: String!, password: String!): Boolean!
  verifyEmailSignup(token: String!): Boolean!
  createQuestion(data: QuestionInput!): QuestionType!
  updateQuestion(data: QuestionInputPartial!): QuestionType!
  createSubject(data: SubjectInput!): SubjectType! @isAuthenticated
  createLesson(data: LessonInput!): LessonType! @isAuthenticated
  createTopic(
    """Input data for `createTopic` mutation"""
    input: CreateTopicInput!
  ): TopicType!
  assignSubjectToFaculties(faculties: [Int!]!): Boolean! @isACOE
  createSyllabuses(course: Int!, units: [Int!]!, lessons: [Int!]!): Boolean!
  assignFaculties(course: Int!, subject: Int!, faculties: [Int!]!): Boolean! @isACOE
  updateTopic(topic: Int!, active: Boolean!): Boolean!
}

"""An object with a Globally Unique ID"""
interface Node {
  """The Globally Unique ID of this object"""
  id: GlobalID!
}

"""Input of an object that implements the `Node` interface."""
input NodeInput {
  id: GlobalID!
}

input OneToManyInput {
  set: ID
}

"""Information to aid in pagination."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PreviousYearsQPType implements Node {
  id: GlobalID!
  month: MonthEnum!
  year: Int!
}

type ProgrammeType implements Node {
  id: GlobalID!
  name: String!
}

type Queries {
  me: UserType!
  isAuthorized: Boolean!
  faculties: [UserType!]! @isACOE
  question(pk: ID!): QuestionType
  markRanges: [MarkRangeType!]! @isAuthenticated
  bloomsTaxonomyLevels: [BloomsTaxonomyLevelType!]! @isAuthenticated
  previousYears: [PreviousYearsQPType!]! @isAuthenticated
  questionContainsFilter(
    question: String!

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): QuestionTypeConnection!
  getSubjects(regulation: Int!, programme: String!, degree: String!, semester: Int!, department: String!): [FacultiesHandlingType!]! @isAuthenticated
  generateQuestions(course: Int!, lids: [Int!]!, marks: [Int!]!, counts: [Int!]!, choices: [Boolean!]!): JSON! @isACOE
  departmentsAccessTo: [FacultiesHandlingType!]! @isAuthenticated
  getLessons(regulation: Int!, programme: String!, degree: String!, semester: Int!, department: String!, subjectCode: String!): [SyllabusType!]! @isAuthenticated
  getQuestions(
    regulation: Int!
    programme: String!
    degree: String!
    semester: Int!
    department: String!
    subjectCode: String!
    unit: Int!
    search: String!

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): QuestionTypeConnection! @isAuthenticated
  getCourses: [CourseType!]! @isACOE
  getSubjectsById(courseId: Int!): [SubjectType!]! @isAuthenticated
  getLessonsById(courseId: Int!, subjectId: Int!): [SyllabusType!]! @isAuthenticated
  getTopics(regulation: Int!, programme: String!, degree: String!, semester: Int!, department: String!, subjectCode: String!, unit: Int!): [TopicType!]!
  validateCreateSyllabus: Boolean! @isAuthenticated
  getAllSubjects: [SubjectType!]! @isACOE
  getLessonsBySubjectId(subjectId: Int!): [LessonType!]! @isAuthenticated
  facultiesHandlings(course: Int!, subject: Int!): [FacultiesHandlingType!]! @isACOE
  isCoe: Boolean! @isAuthenticated
}

input QuestionInput {
  lesson: OneToManyInput!
  question: String!
  answer: String
  mark: NodeInput!
  btl: NodeInput!
  difficulty: DifficultyEnum!
  createdBy: NodeInput
  topics: ManyToManyInput
  previousYears: ManyToManyInput
  priority: Int
  scenarioBased: Boolean
}

input QuestionInputPartial {
  id: GlobalID!
  lesson: OneToManyInput
  question: String
  answer: String
  mark: NodeInput!
  btl: NodeInput!
  difficulty: DifficultyEnum
  createdBy: NodeInput
  topics: ManyToManyInput
  previousYears: ManyToManyInput
  priority: Int
  scenarioBased: Boolean
}

type QuestionType implements Node {
  id: GlobalID!
  lesson: LessonType!
  question: String!
  answer: String
  mark: MarkRangeType!
  startMark: Int!
  endMark: Int!
  btl: BloomsTaxonomyLevelType!
  difficulty: DifficultyEnum!
  createdBy: UserType!
  topics: [TopicType!]!
  previousYears: [PreviousYearsQPType!]!
  priority: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  scenarioBased: Boolean!
}

"""A connection to a list of items."""
type QuestionTypeConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [QuestionTypeEdge!]!

  """Total quantity of existing nodes."""
  totalCount: Int
}

"""An edge in a connection."""
type QuestionTypeEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: QuestionType!
}

type RegulationType implements Node {
  id: GlobalID!
  year: Int!
}

input SubjectInput {
  code: String!
  subjectName: String!
  co: String!
}

type SubjectType implements Node {
  id: GlobalID!
  code: String!
  subjectName: String!
  co: String!
}

type SyllabusType implements Node {
  id: GlobalID!
  course: CourseType!
  unit: Int!
  lesson: LessonType!
}

type TopicType implements Node {
  id: GlobalID!
  name: String!
  active: Boolean!
}

type UserType implements Node {
  id: GlobalID!
  email: String!
  firstName: String!
  lastName: String!
  isActive: Boolean!
  fullName: String!
}
