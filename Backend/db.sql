--
-- PostgreSQL database dump
--

-- Dumped from database version 12.14
-- Dumped by pg_dump version 12.14

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: auth_group; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.auth_group (
    id integer NOT NULL,
    name character varying(150) NOT NULL
);


ALTER TABLE public.auth_group OWNER TO admin;

--
-- Name: auth_group_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.auth_group ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_group_permissions; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.auth_group_permissions (
    id bigint NOT NULL,
    group_id integer NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE public.auth_group_permissions OWNER TO admin;

--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.auth_group_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_permission; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.auth_permission (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    content_type_id integer NOT NULL,
    codename character varying(100) NOT NULL
);


ALTER TABLE public.auth_permission OWNER TO admin;

--
-- Name: auth_permission_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.auth_permission ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_permission_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: coe_coe; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.coe_coe (
    id bigint NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    coe_id bigint NOT NULL,
    active boolean NOT NULL
);


ALTER TABLE public.coe_coe OWNER TO admin;

--
-- Name: coe_coe_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.coe_coe ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.coe_coe_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_admin_log; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.django_admin_log (
    id integer NOT NULL,
    action_time timestamp with time zone NOT NULL,
    object_id text,
    object_repr character varying(200) NOT NULL,
    action_flag smallint NOT NULL,
    change_message text NOT NULL,
    content_type_id integer,
    user_id bigint NOT NULL,
    CONSTRAINT django_admin_log_action_flag_check CHECK ((action_flag >= 0))
);


ALTER TABLE public.django_admin_log OWNER TO admin;

--
-- Name: django_admin_log_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.django_admin_log ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_admin_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_content_type; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.django_content_type (
    id integer NOT NULL,
    app_label character varying(100) NOT NULL,
    model character varying(100) NOT NULL
);


ALTER TABLE public.django_content_type OWNER TO admin;

--
-- Name: django_content_type_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.django_content_type ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_content_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_migrations; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.django_migrations (
    id bigint NOT NULL,
    app character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    applied timestamp with time zone NOT NULL
);


ALTER TABLE public.django_migrations OWNER TO admin;

--
-- Name: django_migrations_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.django_migrations ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_migrations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_session; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.django_session (
    session_key character varying(40) NOT NULL,
    session_data text NOT NULL,
    expire_date timestamp with time zone NOT NULL
);


ALTER TABLE public.django_session OWNER TO admin;

--
-- Name: questions_bloomstaxonomylevel; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.questions_bloomstaxonomylevel (
    id bigint NOT NULL,
    name character varying(3) NOT NULL,
    description character varying(70) NOT NULL
);


ALTER TABLE public.questions_bloomstaxonomylevel OWNER TO admin;

--
-- Name: questions_bloomstaxonomylevel_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.questions_bloomstaxonomylevel ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.questions_bloomstaxonomylevel_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: questions_course; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.questions_course (
    id bigint NOT NULL,
    semester integer NOT NULL,
    active boolean NOT NULL,
    department_id bigint NOT NULL,
    regulation_id bigint NOT NULL
);


ALTER TABLE public.questions_course OWNER TO admin;

--
-- Name: questions_course_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.questions_course ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.questions_course_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: questions_createsyllabus; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.questions_createsyllabus (
    id bigint NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    is_completed boolean NOT NULL,
    faculty_id bigint NOT NULL
);


ALTER TABLE public.questions_createsyllabus OWNER TO admin;

--
-- Name: questions_createsyllabus_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.questions_createsyllabus ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.questions_createsyllabus_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: questions_createsyllabus_syllabus; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.questions_createsyllabus_syllabus (
    id bigint NOT NULL,
    createsyllabus_id bigint NOT NULL,
    syllabus_id bigint NOT NULL
);


ALTER TABLE public.questions_createsyllabus_syllabus OWNER TO admin;

--
-- Name: questions_createsyllabus_syllabus_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.questions_createsyllabus_syllabus ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.questions_createsyllabus_syllabus_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: questions_degree; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.questions_degree (
    id bigint NOT NULL,
    name character varying(20) NOT NULL,
    full_form character varying(100) NOT NULL
);


ALTER TABLE public.questions_degree OWNER TO admin;

--
-- Name: questions_degree_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.questions_degree ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.questions_degree_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: questions_department; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.questions_department (
    id bigint NOT NULL,
    branch character varying(80) NOT NULL,
    branch_code character varying(10) NOT NULL,
    degree_id bigint NOT NULL,
    hod_id bigint,
    programme_id bigint NOT NULL
);


ALTER TABLE public.questions_department OWNER TO admin;

--
-- Name: questions_department_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.questions_department ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.questions_department_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: questions_facultieshandling; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.questions_facultieshandling (
    id bigint NOT NULL,
    course_id bigint NOT NULL,
    subject_id bigint NOT NULL
);


ALTER TABLE public.questions_facultieshandling OWNER TO admin;

--
-- Name: questions_facultieshandling_faculties; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.questions_facultieshandling_faculties (
    id bigint NOT NULL,
    facultieshandling_id bigint NOT NULL,
    user_id bigint NOT NULL
);


ALTER TABLE public.questions_facultieshandling_faculties OWNER TO admin;

--
-- Name: questions_facultieshandling_faculties_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.questions_facultieshandling_faculties ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.questions_facultieshandling_faculties_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: questions_facultieshandling_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.questions_facultieshandling ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.questions_facultieshandling_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: questions_image; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.questions_image (
    id bigint NOT NULL,
    uploaded_at timestamp with time zone NOT NULL,
    photo character varying(100)
);


ALTER TABLE public.questions_image OWNER TO admin;

--
-- Name: questions_image_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.questions_image ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.questions_image_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: questions_lesson; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.questions_lesson (
    id bigint NOT NULL,
    name character varying(200) NOT NULL,
    subject_id bigint NOT NULL,
    objective text NOT NULL,
    outcome text NOT NULL
);


ALTER TABLE public.questions_lesson OWNER TO admin;

--
-- Name: questions_lesson_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.questions_lesson ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.questions_lesson_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: questions_lesson_outcome_btl; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.questions_lesson_outcome_btl (
    id bigint NOT NULL,
    lesson_id bigint NOT NULL,
    bloomstaxonomylevel_id bigint NOT NULL
);


ALTER TABLE public.questions_lesson_outcome_btl OWNER TO admin;

--
-- Name: questions_lesson_outcome_btl_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.questions_lesson_outcome_btl ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.questions_lesson_outcome_btl_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: questions_markrange; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.questions_markrange (
    id bigint NOT NULL,
    start integer NOT NULL,
    "end" integer NOT NULL
);


ALTER TABLE public.questions_markrange OWNER TO admin;

--
-- Name: questions_markrange_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.questions_markrange ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.questions_markrange_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: questions_previousyearsqp; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.questions_previousyearsqp (
    id bigint NOT NULL,
    month character varying(3) NOT NULL,
    year integer NOT NULL
);


ALTER TABLE public.questions_previousyearsqp OWNER TO admin;

--
-- Name: questions_previousyearsqp_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.questions_previousyearsqp ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.questions_previousyearsqp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: questions_programme; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.questions_programme (
    id bigint NOT NULL,
    name character varying(20) NOT NULL
);


ALTER TABLE public.questions_programme OWNER TO admin;

--
-- Name: questions_programme_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.questions_programme ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.questions_programme_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: questions_question; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.questions_question (
    id bigint NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    question text NOT NULL,
    answer text,
    start_mark integer NOT NULL,
    end_mark integer NOT NULL,
    difficulty character varying(1) NOT NULL,
    btl_id bigint NOT NULL,
    created_by_id bigint NOT NULL,
    lesson_id bigint NOT NULL,
    mark_id bigint,
    priority integer NOT NULL,
    scenario_based boolean NOT NULL
);


ALTER TABLE public.questions_question OWNER TO admin;

--
-- Name: questions_question_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.questions_question ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.questions_question_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: questions_question_previous_years; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.questions_question_previous_years (
    id bigint NOT NULL,
    question_id bigint NOT NULL,
    previousyearsqp_id bigint NOT NULL
);


ALTER TABLE public.questions_question_previous_years OWNER TO admin;

--
-- Name: questions_question_previous_years_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.questions_question_previous_years ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.questions_question_previous_years_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: questions_question_topics; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.questions_question_topics (
    id bigint NOT NULL,
    question_id bigint NOT NULL,
    topic_id bigint NOT NULL
);


ALTER TABLE public.questions_question_topics OWNER TO admin;

--
-- Name: questions_question_topics_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.questions_question_topics ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.questions_question_topics_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: questions_regulation; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.questions_regulation (
    id bigint NOT NULL,
    year integer NOT NULL
);


ALTER TABLE public.questions_regulation OWNER TO admin;

--
-- Name: questions_regulation_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.questions_regulation ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.questions_regulation_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: questions_subject; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.questions_subject (
    id bigint NOT NULL,
    code character varying(15) NOT NULL,
    subject_name character varying(70) NOT NULL,
    co character varying(7) NOT NULL
);


ALTER TABLE public.questions_subject OWNER TO admin;

--
-- Name: questions_subject_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.questions_subject ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.questions_subject_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: questions_syllabus; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.questions_syllabus (
    id bigint NOT NULL,
    unit integer NOT NULL,
    course_id bigint NOT NULL,
    lesson_id bigint NOT NULL
);


ALTER TABLE public.questions_syllabus OWNER TO admin;

--
-- Name: questions_syllabus_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.questions_syllabus ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.questions_syllabus_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: questions_topic; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.questions_topic (
    id bigint NOT NULL,
    name character varying(200) NOT NULL,
    lesson_id bigint NOT NULL,
    active boolean NOT NULL,
    priority boolean NOT NULL
);


ALTER TABLE public.questions_topic OWNER TO admin;

--
-- Name: questions_topic_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.questions_topic ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.questions_topic_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: refresh_token_refreshtoken; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.refresh_token_refreshtoken (
    id bigint NOT NULL,
    token character varying(255) NOT NULL,
    created timestamp with time zone NOT NULL,
    revoked timestamp with time zone,
    user_id bigint NOT NULL
);


ALTER TABLE public.refresh_token_refreshtoken OWNER TO admin;

--
-- Name: refresh_token_refreshtoken_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.refresh_token_refreshtoken ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.refresh_token_refreshtoken_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: users_newuser; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.users_newuser (
    id bigint NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    first_name character varying(150) NOT NULL,
    last_name character varying(150) NOT NULL,
    email character varying(150) NOT NULL,
    password text NOT NULL,
    email_verified boolean NOT NULL,
    email_secret character varying(120) NOT NULL,
    approved boolean NOT NULL
);


ALTER TABLE public.users_newuser OWNER TO admin;

--
-- Name: users_newusers_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.users_newuser ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.users_newusers_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: users_user; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.users_user (
    id bigint NOT NULL,
    password character varying(128) NOT NULL,
    last_login timestamp with time zone,
    is_superuser boolean NOT NULL,
    first_name character varying(150) NOT NULL,
    last_name character varying(150) NOT NULL,
    is_staff boolean NOT NULL,
    is_active boolean NOT NULL,
    date_joined timestamp with time zone NOT NULL,
    email character varying(254) NOT NULL
);


ALTER TABLE public.users_user OWNER TO admin;

--
-- Name: users_user_groups; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.users_user_groups (
    id bigint NOT NULL,
    user_id bigint NOT NULL,
    group_id integer NOT NULL
);


ALTER TABLE public.users_user_groups OWNER TO admin;

--
-- Name: users_user_groups_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.users_user_groups ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.users_user_groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: users_user_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.users_user ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.users_user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: users_user_user_permissions; Type: TABLE; Schema: public; Owner: admin
--

CREATE TABLE public.users_user_user_permissions (
    id bigint NOT NULL,
    user_id bigint NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE public.users_user_user_permissions OWNER TO admin;

--
-- Name: users_user_user_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: admin
--

ALTER TABLE public.users_user_user_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.users_user_user_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Data for Name: auth_group; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.auth_group (id, name) FROM stdin;
\.


--
-- Data for Name: auth_group_permissions; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.auth_group_permissions (id, group_id, permission_id) FROM stdin;
\.


--
-- Data for Name: auth_permission; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.auth_permission (id, name, content_type_id, codename) FROM stdin;
1	Can add log entry	1	add_logentry
2	Can change log entry	1	change_logentry
3	Can delete log entry	1	delete_logentry
4	Can view log entry	1	view_logentry
5	Can add permission	2	add_permission
6	Can change permission	2	change_permission
7	Can delete permission	2	delete_permission
8	Can view permission	2	view_permission
9	Can add group	3	add_group
10	Can change group	3	change_group
11	Can delete group	3	delete_group
12	Can view group	3	view_group
13	Can add content type	4	add_contenttype
14	Can change content type	4	change_contenttype
15	Can delete content type	4	delete_contenttype
16	Can view content type	4	view_contenttype
17	Can add session	5	add_session
18	Can change session	5	change_session
19	Can delete session	5	delete_session
20	Can view session	5	view_session
21	Can add refresh token	6	add_refreshtoken
22	Can change refresh token	6	change_refreshtoken
23	Can delete refresh token	6	delete_refreshtoken
24	Can view refresh token	6	view_refreshtoken
25	Can add user	7	add_user
26	Can change user	7	change_user
27	Can delete user	7	delete_user
28	Can view user	7	view_user
29	Can add blooms taxonomy level	8	add_bloomstaxonomylevel
30	Can change blooms taxonomy level	8	change_bloomstaxonomylevel
31	Can delete blooms taxonomy level	8	delete_bloomstaxonomylevel
32	Can view blooms taxonomy level	8	view_bloomstaxonomylevel
33	Can add degree	9	add_degree
34	Can change degree	9	change_degree
35	Can delete degree	9	delete_degree
36	Can view degree	9	view_degree
37	Can add lesson	10	add_lesson
38	Can change lesson	10	change_lesson
39	Can delete lesson	10	delete_lesson
40	Can view lesson	10	view_lesson
41	Can add mark range	11	add_markrange
42	Can change mark range	11	change_markrange
43	Can delete mark range	11	delete_markrange
44	Can view mark range	11	view_markrange
45	Can add previous years qp	12	add_previousyearsqp
46	Can change previous years qp	12	change_previousyearsqp
47	Can delete previous years qp	12	delete_previousyearsqp
48	Can view previous years qp	12	view_previousyearsqp
49	Can add programme	13	add_programme
50	Can change programme	13	change_programme
51	Can delete programme	13	delete_programme
52	Can view programme	13	view_programme
53	Can add regulation	14	add_regulation
54	Can change regulation	14	change_regulation
55	Can delete regulation	14	delete_regulation
56	Can view regulation	14	view_regulation
57	Can add subject	15	add_subject
58	Can change subject	15	change_subject
59	Can delete subject	15	delete_subject
60	Can view subject	15	view_subject
61	Can add question	16	add_question
62	Can change question	16	change_question
63	Can delete question	16	delete_question
64	Can view question	16	view_question
65	Can add department	17	add_department
66	Can change department	17	change_department
67	Can delete department	17	delete_department
68	Can view department	17	view_department
69	Can add course	18	add_course
70	Can change course	18	change_course
71	Can delete course	18	delete_course
72	Can view course	18	view_course
73	Can add syllabus	19	add_syllabus
74	Can change syllabus	19	change_syllabus
75	Can delete syllabus	19	delete_syllabus
76	Can view syllabus	19	view_syllabus
77	Can add faculties handling	20	add_facultieshandling
78	Can change faculties handling	20	change_facultieshandling
79	Can delete faculties handling	20	delete_facultieshandling
80	Can view faculties handling	20	view_facultieshandling
81	Can add image	21	add_image
82	Can change image	21	change_image
83	Can delete image	21	delete_image
84	Can view image	21	view_image
85	Can add topic	22	add_topic
86	Can change topic	22	change_topic
87	Can delete topic	22	delete_topic
88	Can view topic	22	view_topic
89	Can add coe	23	add_coe
90	Can change coe	23	change_coe
91	Can delete coe	23	delete_coe
92	Can view coe	23	view_coe
93	Can add new user	24	add_newuser
94	Can change new user	24	change_newuser
95	Can delete new user	24	delete_newuser
96	Can view new user	24	view_newuser
97	Can add create syllabus	25	add_createsyllabus
98	Can change create syllabus	25	change_createsyllabus
99	Can delete create syllabus	25	delete_createsyllabus
100	Can view create syllabus	25	view_createsyllabus
\.


--
-- Data for Name: coe_coe; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.coe_coe (id, created_at, updated_at, coe_id, active) FROM stdin;
3	2023-02-16 05:07:41.394+00	2023-02-16 05:07:41.394+00	1	t
\.


--
-- Data for Name: django_admin_log; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.django_admin_log (id, action_time, object_id, object_repr, action_flag, change_message, content_type_id, user_id) FROM stdin;
1	2022-11-24 11:30:51.82+00	1	Define ADT. Give any two examples.	1	[{"added": {}}]	16	1
2	2022-11-24 11:50:15.148+00	2	Distinguish between linear and non linear data structures.	1	[{"added": {}}]	16	1
3	2022-11-24 11:55:14.799+00	3	Compare calloc() and realloc() function and mention its application in linked list.	1	[{"added": {}}]	16	1
4	2022-11-24 11:56:01.425+00	4	Describe the differences between singly and doubly linked lists.	1	[{"added": {}}]	16	1
5	2022-11-24 11:56:53.982+00	5	List out the areas in which data structures are applied extensively.	1	[{"added": {}}]	16	1
6	2022-11-24 11:57:54.28+00	6	Define non linear data structure.	1	[{"added": {}}]	16	1
7	2022-11-24 11:59:02.324+00	7	Compare singly linked list with circular linked list.	1	[{"added": {}}]	16	1
8	2022-11-24 11:59:53.539+00	8	What are the types of linked list?	1	[{"added": {}}]	16	1
9	2022-11-24 12:02:40.948+00	9	List out the advantage of circular linked list.	1	[{"added": {}}]	16	1
10	2022-11-24 12:06:06.84+00	10	Binary search cannot be performed on a linked list. Examine.	1	[{"added": {}}]	16	1
11	2022-11-24 12:06:56.728+00	11	Discuss the advantages and disadvantages of linked lists and arrays.	1	[{"added": {}}]	16	1
12	2022-11-24 12:07:57.657+00	12	Give an example for linked list application.	1	[{"added": {}}]	16	1
13	2022-11-24 12:09:52.142+00	13	Specify the use of Header node in a linked list.	1	[{"added": {}}]	16	1
14	2022-11-24 12:10:27.881+00	14	Illustrate the use of linked list with an example.	1	[{"added": {}}]	16	1
15	2022-11-24 12:11:09.865+00	15	Show the ways in which list ADT can be implemented.	1	[{"added": {}}]	16	1
16	2022-11-24 12:11:59.76+00	16	Differentiate arrays and linked lists.	1	[{"added": {}}]	16	1
17	2022-11-24 12:12:53.858+00	17	Analyze and write a find routine in array implementation.	1	[{"added": {}}]	16	1
18	2022-11-24 12:14:11.076+00	18	Analyze and write the array representation of a polynomial: p(x) = 4x3+6x2+7x+9	1	[{"added": {}}]	16	1
19	2022-11-24 12:16:43.453+00	19	Should arrays or linked lists be used for the following types of applications? Support your justification.\r\n1.\tMany search operations in sorted list.\r\n2.\tMany search operations in Unsorted list.	1	[{"added": {}}]	16	1
20	2022-11-24 12:17:25.168+00	20	Develop an algorithm for insertion operation in a singly linked list.	1	[{"added": {}}]	16	1
21	2022-11-24 12:20:01.185+00	21	Describe the Applications of lists.	1	[{"added": {}}]	16	1
22	2022-11-24 12:20:58.079+00	22	Describe the \tPolynomial manipulation.	1	[{"added": {}}]	16	1
23	2022-11-24 12:22:13.386+00	23	What is a linked list?	1	[{"added": {}}]	16	1
24	2022-11-24 12:22:42.63+00	24	Describe the suitable routine segments for any four operations.	1	[{"added": {}}]	16	1
25	2022-11-24 12:25:38.096+00	25	List an algorithm to perform the following operations in a doubly linked list. \r\n  i.Insert a node at the end of the list.	1	[{"added": {}}]	16	1
26	2022-11-24 12:26:25.6+00	26	List an algorithm to perform the following operations in a doubly linked list.\r\n      i.Delete the last node in the list.	1	[{"added": {}}]	16	1
27	2022-11-24 12:27:14.804+00	27	Discuss the insertion and deletion procedures for cursor based linked lists.	1	[{"added": {}}]	16	1
28	2022-11-24 12:27:55.143+00	28	Give an algorithm for the deletion and reverse operations on doubly linked list.	1	[{"added": {}}]	16	1
29	2022-11-24 12:28:39.289+00	29	Give the algorithm to perform insertion on a doubly linked list.	1	[{"added": {}}]	16	1
30	2022-11-24 12:29:08.05+00	30	Give the algorithm to perform deletion on a doubly linked list.	1	[{"added": {}}]	16	1
31	2022-11-24 12:30:32.633+00	31	Write an algorithm to demonstrate a polynomial using a linked list for Addition and Subtraction.	1	[{"added": {}}]	16	1
32	2022-11-24 12:31:25.719+00	32	Write an algorithm to demonstrate a polynomial using a linked list for Multiplication operations.	1	[{"added": {}}]	16	1
33	2022-11-24 12:32:50.683+00	33	Analyze and write algorithm for Circular Linked list for the following operations using structure pointer.\r\ni.\tCreate & Insert .	1	[{"added": {}}]	16	1
34	2022-11-24 12:33:41.05+00	34	Analyze and write algorithm for Circular Linked list for the following operations using structure pointer.\r\n i. Delete & Display.	1	[{"added": {}}]	16	1
35	2022-11-24 12:35:56.936+00	35	Explain the application of linked list in detail.\r\ni. Radix sort.	1	[{"added": {}}]	16	1
36	2022-11-24 12:36:38.4+00	36	Explain the application of linked list in detail.\r\ni.  Multi list.	1	[{"added": {}}]	16	1
37	2022-11-24 12:37:47.645+00	37	Consider an array A[1: n] Given a position, write an algorithm to insert an element in the Array. If the position is empty, the element is inserted easily. If the position is already occupied the elem	1	[{"added": {}}]	16	1
38	2022-11-24 12:38:53.093+00	38	Develop a program to add the values of the nodes of a linked list and then calculate the mean.	1	[{"added": {}}]	16	1
39	2022-11-24 12:39:20.279+00	39	Describe the various operations of the list ADT with examples.	1	[{"added": {}}]	16	1
40	2022-11-24 12:40:17.342+00	40	Illustrate how polynomial manipulations are performed using lists? Explain any two operations with example.	1	[{"added": {}}]	16	1
41	2022-11-24 12:41:24.314+00	41	Explain the steps involved in the following insertion operations in a singly linked list.\r\ni. Insert the node in the start and End.	1	[{"added": {}}]	16	1
42	2022-11-24 12:42:05.848+00	42	Explain the steps involved in the following insertion operations in a singly linked list.\r\n ii. Insert the node in the middle of the List.	1	[{"added": {}}]	16	1
43	2022-11-24 12:42:46.168+00	43	Dicuss an algorithm for linked list implementation of list.	1	[{"added": {}}]	16	1
44	2022-11-24 12:43:25.042+00	44	Create an algorithm to add two polynomials using linked list.	1	[{"added": {}}]	16	1
45	2022-11-24 12:44:04.062+00	45	Explain an algorithm to split a linked list into two sub lists containing odd and even ordered elements in them respectively.	1	[{"added": {}}]	16	1
46	2022-11-24 12:45:11.254+00	46	Explain an algorithm to merge two sorted linked lists into a single sorted list.	1	[{"added": {}}]	16	1
47	2022-11-24 12:46:17.043+00	47	Design algorithm for various operations performed on circular linked list.\r\nExtend the algorithm defined in the previous question for the doubly linked circular list.	1	[{"added": {}}]	16	1
48	2022-11-24 12:48:05.226+00	48	Point out the advantage of representing stack using a linked list than array.	1	[{"added": {}}]	16	1
49	2022-11-24 12:48:38.443+00	49	Point out the rules followed during the infix to postfix conversions.	1	[{"added": {}}]	16	1
50	2022-11-24 12:49:08.091+00	50	Compare the working of stack and queue data structure.	1	[{"added": {}}]	16	1
51	2022-11-24 12:49:36.038+00	51	Develop an algorithm for inserting a new element into the stack.	1	[{"added": {}}]	16	1
52	2022-11-24 12:50:05.435+00	52	Define stack and queue.	1	[{"added": {}}]	16	1
53	2022-11-24 12:50:52.448+00	53	List any four applications of stack.	1	[{"added": {}}]	16	1
54	2022-11-24 12:52:01.863+00	54	Given the prefix for an expression. Write its postfix:	1	[{"added": {}}]	16	1
55	2022-11-24 12:52:06.896+00	37	Consider an array A[1: n] Given a position, write an algorithm to insert an element in the Array. If the position is empty, the element is inserted easily. If the position is already occupied the elem	2	[{"changed": {"fields": ["Question"]}}]	16	1
56	2022-11-24 12:53:12.863+00	55	Describe how the following "infix" expression is evaluated with the help of	1	[{"added": {}}]	16	1
57	2022-11-24 12:54:05.769+00	56	Give the postfix and prefix forms of the expression:	1	[{"added": {}}]	16	1
58	2022-11-24 12:54:38.701+00	57	Define double ended queue.	1	[{"added": {}}]	16	1
59	2022-11-24 12:55:26.106+00	58	List the applications of a queue.	1	[{"added": {}}]	16	1
60	2022-11-24 12:56:19.136+00	59	What are the applications of priority queue?	1	[{"added": {}}]	16	1
61	2022-11-24 12:56:44.437+00	60	What is circular queue?	1	[{"added": {}}]	16	1
62	2022-11-24 12:57:11.436+00	61	Circular queue is better than standard linear queue, Why?	1	[{"added": {}}]	16	1
63	2022-11-24 12:57:35.646+00	62	Classify the different types of queues.	1	[{"added": {}}]	16	1
64	2022-11-24 12:58:21.202+00	63	Illustrate the difference between a queues and linked lists with an example.	1	[{"added": {}}]	16	1
65	2022-11-24 12:58:49.087+00	64	Complete a routine to display the contents of queue.	1	[{"added": {}}]	16	1
66	2022-11-24 12:59:02.204+00	65	What is hashing?	1	[{"added": {}}]	16	1
67	2022-11-24 12:59:16.993+00	66	Analyze and write a routine to check whether the queue is full or empty.	1	[{"added": {}}]	16	1
68	2022-11-24 13:00:12.579+00	67	For railway reservation the queue data structure is preferred –Justify.	1	[{"added": {}}]	16	1
69	2022-11-24 13:00:51.384+00	68	Develop an algorithm for deleting an element in a double ended queue.	1	[{"added": {}}]	16	1
70	2022-11-24 13:00:59.942+00	69	Describe how the divide and conquer technique is implemented in binary search.	1	[{"added": {}}]	16	1
71	2022-11-24 13:01:19.383+00	70	Describe with an example how to evaluate arithmetic expressions using stacks.	1	[{"added": {}}]	16	1
72	2022-11-24 13:01:35.869+00	71	Describe the algorithm to sort the following array: 77, 33, 44, 11, 88, 22, 66,\r\n55 (Insertion sort)	1	[{"added": {}}]	16	1
73	2022-11-24 13:01:55.031+00	72	Describe the algorithm to sort the following array: 77, 33, 44, 11, 88, 22, 66,\r\n55	1	[{"added": {}}]	16	1
74	2022-11-24 13:01:58.276+00	73	Explain array based implementation of stacks.	1	[{"added": {}}]	16	1
75	2022-11-24 13:02:12.648+00	72	Describe the algorithm to sort the following array: 77, 33, 44, 11, 88, 22, 66,\r\n55 (Shell Sort)	2	[{"changed": {"fields": ["Question"]}}]	16	1
76	2022-11-24 13:02:26.178+00	74	Explain linked list implementation of stacks.	1	[{"added": {}}]	16	1
77	2022-11-24 13:03:02.691+00	75	Describe about stack ADT in detail.	1	[{"added": {}}]	16	1
78	2022-11-24 13:03:41.085+00	76	Explain any one application of stack.	1	[{"added": {}}]	16	1
79	2022-11-24 13:04:51.294+00	77	Explain the following expressions with an example. \r\n  i.Prefix and infix	1	[{"added": {}}]	16	1
80	2022-11-24 13:05:34.727+00	78	Explain the following expressions with an example.\r\n i.Postfix.	1	[{"added": {}}]	16	1
81	2022-11-24 13:06:15.936+00	79	Write an algorithm to convert an infix expression to a postfix expression. Trace the algorithm to convert the infix expression ‘(a+b)*c/d+e/f” to a postfix expression.	1	[{"added": {}}]	16	1
82	2022-11-24 13:06:59.44+00	80	Justify the need for Infix and Postfix expression.	1	[{"added": {}}]	16	1
83	2022-11-24 13:07:55.141+00	81	Give an algorithm for push and pop operations on stack using a linked list.	1	[{"added": {}}]	16	1
84	2022-11-24 13:09:20.292+00	82	Define extendible hashing.	1	[{"added": {}}]	16	1
85	2022-11-24 13:10:02.393+00	83	Give the fastest searching algorithm.	1	[{"added": {}}]	16	1
86	2022-11-24 13:10:39.278+00	84	What is meant by internal and external sorting? Give any two examples for each type.	1	[{"added": {}}]	16	1
87	2022-11-24 13:11:17.055+00	85	Describe the complexity of bubble sort.	1	[{"added": {}}]	16	1
88	2022-11-24 13:11:52.013+00	86	Name the applications of linear and binary search techniques.	1	[{"added": {}}]	16	1
89	2022-11-24 13:12:19.072+00	87	Give the time complexities of bubble sort and quick sort.	1	[{"added": {}}]	16	1
90	2022-11-24 13:12:45.075+00	88	Predict the fastest sorting algorithm, justify.	1	[{"added": {}}]	16	1
91	2022-11-24 13:13:45.488+00	89	Compare internal and external sorting.	1	[{"added": {}}]	16	1
92	2022-11-24 13:14:12.867+00	90	Distinguish between linear and binary search technique.	1	[{"added": {}}]	16	1
93	2022-11-24 13:14:57.75+00	91	Classify the different sorting methods.	1	[{"added": {}}]	16	1
94	2022-11-24 13:15:26.204+00	92	Develop an algorithm for a quick sort.	1	[{"added": {}}]	16	1
95	2022-11-24 13:15:56.996+00	93	Which hashing technique is best and illustrate with an example?	1	[{"added": {}}]	16	1
96	2022-11-24 13:16:22.545+00	94	Summarize the open addressing hashing method with an example.	1	[{"added": {}}]	16	1
97	2022-11-24 13:16:43.564+00	95	Point out the advantages of using quick sort.	1	[{"added": {}}]	16	1
98	2022-11-24 13:17:17.706+00	96	Compare the working of linear and binary search techniques.	1	[{"added": {}}]	16	1
99	2022-11-24 13:17:48.777+00	97	Select the best sorting method out of the following - insertion sort, quick sort and merge sort and give justification.	1	[{"added": {}}]	16	1
100	2022-11-24 13:17:49.21+00	98	Describe the process of postfix expression evaluation with an example.	1	[{"added": {}}]	16	1
101	2022-11-24 13:18:07.545+00	99	Illustrate the time complexity of insertion sort with an example.	1	[{"added": {}}]	16	1
102	2022-11-24 13:18:27.637+00	100	Describe the process of conversion from infix expression to postfix expression using stack.	1	[{"added": {}}]	16	1
103	2022-11-24 13:18:30.973+00	101	Identify the advantage of shell sort over insertion sort.	1	[{"added": {}}]	16	1
104	2022-11-24 13:18:55.37+00	102	What is a graph and its types?	1	[{"added": {}}]	16	1
105	2022-11-24 13:18:56.11+00	103	Develop a simple algorithm for a linear search.	1	[{"added": {}}]	16	1
106	2022-11-24 13:19:14.738+00	104	Write an algorithm that checks if expression is correctly parenthesized using stack and illustrate with an example.	1	[{"added": {}}]	16	1
107	2022-11-24 13:20:03.691+00	105	Write the function to examine whether the stack is full() or empty().	1	[{"added": {}}]	16	1
108	2022-11-24 13:20:59.07+00	106	Create a complete undirected graph having five nodes	1	[{"added": {}}]	16	1
109	2022-11-24 13:21:12.009+00	107	Describe about queue ADT in detail.	1	[{"added": {}}]	16	1
110	2022-11-24 13:21:21.736+00	108	When do you say a graph is bi-connected?	1	[{"added": {}}]	16	1
111	2022-11-24 13:21:30.934+00	109	List the different types of hashing techniques?	1	[{"added": {}}]	16	1
112	2022-11-24 13:21:36.05+00	110	Explain any one application of queue with suitable example.	1	[{"added": {}}]	16	1
113	2022-11-24 13:21:40.179+00	111	Give the purpose of Dijikstra’s algorithm.	1	[{"added": {}}]	16	1
114	2022-11-24 13:21:59.304+00	112	Explain them in detail with an Example.	1	[{"added": {}}]	16	1
115	2022-11-24 13:22:00.534+00	113	Differentiate cyclic and acyclic graph	1	[{"added": {}}]	16	1
116	2022-11-24 13:22:00.845+00	114	Briefly describe the operations of queue with examples.	1	[{"added": {}}]	16	1
117	2022-11-24 13:22:17.363+00	115	Classify strongly connected and weakly connected graph.	1	[{"added": {}}]	16	1
118	2022-11-24 13:22:30.528+00	116	Analyze and write an algorithm to implement queue functions using arrays.	1	[{"added": {}}]	16	1
119	2022-11-24 13:22:33.124+00	117	How to find all articulation points in a given graph?	1	[{"added": {}}]	16	1
120	2022-11-24 13:22:33.488+00	118	Interpret the result of inserting the keys 2, 3, 5, 7, 11, 13, 15, 6, 4 into an initially empty extendible hashing data structure with M = 3.	1	[{"added": {}}]	16	1
121	2022-11-24 13:22:45.483+00	119	Define the length of the graph.	1	[{"added": {}}]	16	1
122	2022-11-24 13:22:55.514+00	120	Develop an algorithm to perform the four operations in a double ended queue\r\nthat is implemented as an array.	1	[{"added": {}}]	16	1
123	2022-11-24 13:22:58.829+00	121	Define minimum spanning tree. Give an example	1	[{"added": {}}]	16	1
124	2022-11-24 13:23:03.305+00	122	Discuss the running time of Divide-and-Conquer Merge sort algorithm.	1	[{"added": {}}]	16	1
125	2022-11-24 13:23:22.008+00	123	State the principle of Topological sorting.	1	[{"added": {}}]	16	1
126	2022-11-24 13:23:24.208+00	124	Discuss circular queue and its implementation.	1	[{"added": {}}]	16	1
127	2022-11-24 13:23:35.067+00	125	Explain procedure for Depth first search algorithm.	1	[{"added": {}}]	16	1
128	2022-11-24 13:23:36.768+00	126	Sort the sequence 3, 1, 4, 1, 5, 9, 2, 6, 5 using Insertion sort.	1	[{"added": {}}]	16	1
129	2022-11-24 13:23:50.806+00	127	Analyze Bi-connectivity.	1	[{"added": {}}]	16	1
130	2022-11-24 13:23:54.261+00	128	Illustrate the enqueue and dequeue operations on double ended queues.	1	[{"added": {}}]	16	1
131	2022-11-24 13:24:01.518+00	129	Describe the routine for insertion sort.	1	[{"added": {}}]	16	1
132	2022-11-24 13:24:30.907+00	130	Prove that the number of edges in a complete graph of n vertices in n(n-1)/2	1	[{"added": {}}]	16	1
133	2022-11-24 13:24:37.915+00	131	Develop and Show the simulation using stack for the following expression : 12 + 3 * 14 – (5 * 16) + 7 .	1	[{"added": {}}]	16	1
134	2022-11-24 13:24:50.002+00	132	Write an algorithm to sort a set of ‘N’ numbers using quick sort. Demonstrate the algorithm for the following set of numbers: 88,11,22,44,66,99,32,67,54,10.	1	[{"added": {}}]	16	1
135	2022-11-24 13:25:21.096+00	133	Explain the various collision resolution techniques in detail with an example	1	[{"added": {}}]	16	1
136	2022-11-24 13:25:22.167+00	134	Explain an algorithm to implement the circular queue using arrays.  List the applications of Queues.	1	[{"added": {}}]	16	1
137	2022-11-24 13:26:04.955+00	135	Assess the difference between double ended queue and circular queue.\r\nShow the simulation using stack for the following expression to convert infix to postpix : p * q = (r-s / t).	1	[{"added": {}}]	16	1
138	2022-11-24 13:26:08.823+00	136	In a complete graph with n vertices, show that the number of spanning trees is at least 2^n-1 - 1	1	[{"added": {}}]	16	1
139	2022-11-24 13:26:10.395+00	137	Compare the below different Sorting methods and discuss about each method in a very detailed Manner.\r\ni.Bucket Sort.	1	[{"added": {}}]	16	1
140	2022-11-24 13:26:30.829+00	136	In a complete graph with n vertices, show that the number of spanning trees is at least 2^n-1 - 1	2	[]	16	1
141	2022-11-24 13:26:49.798+00	138	Develop an algorithm to explain Priority Queue, deQueue and the applications of queues.	1	[{"added": {}}]	16	1
142	2022-11-24 13:26:56.339+00	139	Compare the below different Sorting methods and discuss about each method in a very detailed Manner.\r\nii.Selection Sort	1	[{"added": {}}]	16	1
143	2022-11-24 13:27:14.473+00	140	What are Euler circuits?	1	[{"added": {}}]	16	1
144	2022-11-24 13:27:31.177+00	141	Sort the given integers and Explain the intermediate results using shell sort: 35,12,14,9,15,45,32,95,40,5.	1	[{"added": {}}]	16	1
145	2022-11-24 13:28:01.882+00	142	Write and Explain a C code to sort an integer array.	1	[{"added": {}}]	16	1
146	2022-11-24 13:28:18.001+00	143	Give two applications of graphs.	1	[{"added": {}}]	16	1
147	2022-11-24 13:28:28.107+00	144	Create a algorithm to perform a binary Search.	1	[{"added": {}}]	16	1
148	2022-11-24 13:28:31.932+00	145	What is residual graph?	1	[{"added": {}}]	16	1
149	2022-11-24 13:28:52.367+00	146	Develop an algorithm for Merge sort with an example.	1	[{"added": {}}]	16	1
150	2022-11-24 13:29:37.498+00	147	Write short notes on Bubble Sort.	1	[{"added": {}}]	16	1
151	2022-11-24 13:30:02.534+00	148	Illustrate an algorithm to sort the elements using bubble sort.	1	[{"added": {}}]	16	1
152	2022-11-24 13:30:09.634+00	149	Describe in detail about the following representations of a graph.\r\ni. Adjacency Matrix	1	[{"added": {}}]	16	1
153	2022-11-24 13:30:38.09+00	150	Describe the following collision resolution techniques in detail with an example.\r\ni.Separate chaining.	1	[{"added": {}}]	16	1
154	2022-11-24 13:30:43.808+00	151	Describe in detail about the following representations of a graph.\r\ni. Adjacency List	1	[{"added": {}}]	16	1
155	2022-11-24 13:31:09.706+00	152	Describe the following collision resolution techniques in detail with an example.\r\nii.Rehashing.	1	[{"added": {}}]	16	1
156	2022-11-24 13:31:13.043+00	153	Explain the topological sorting of a graph G with example.	1	[{"added": {}}]	16	1
157	2022-11-24 13:31:33.113+00	154	Quote the step wise procedure for topological sort	1	[{"added": {}}]	16	1
158	2022-11-24 13:31:47.518+00	155	Differentiate depth-first search and breadth-first search traversal of a graph with suitable examples.	1	[{"added": {}}]	16	1
159	2022-11-24 13:31:50.26+00	156	Explain different hashing technique.	1	[{"added": {}}]	16	1
160	2022-11-24 13:32:12.839+00	157	Explain the rehashing technique with suitable example.	1	[{"added": {}}]	16	1
161	2022-11-24 13:32:34.754+00	158	Describe the open addressing and chaining methods of collusion resolution techniques in hashing.	1	[{"added": {}}]	16	1
162	2022-11-24 13:33:04.913+00	159	Develop an algorithm to search a number in a given set of numbers using binary search. Develop and algorithm to explain Extendible Hashing.	1	[{"added": {}}]	16	1
163	2022-11-24 13:33:33.784+00	160	Explain a C code to sort an integer array using Selection Sort and Radix Sort.	1	[{"added": {}}]	16	1
164	2022-11-24 13:33:44.487+00	161	Explain with algorithm, How DFS be performed on a undirected graph.	1	[{"added": {}}]	16	1
165	2022-11-24 13:34:00.387+00	162	Show the algorithm for finding connected components of an undirected\r\ngraph using DFS, and derive the time complexity of the algorithm.	1	[{"added": {}}]	16	1
166	2022-11-24 13:34:07.988+00	163	Explain an algorithm for Shell Sort and Merge Sort and explain with example.	1	[{"added": {}}]	16	1
167	2022-11-24 13:34:18.408+00	164	Discuss an algorithm for Breadth first Search on a graph.	1	[{"added": {}}]	16	1
168	2022-11-24 13:34:37.022+00	165	Give an example based on the algorithm.	1	[{"added": {}}]	16	1
169	2022-11-24 13:35:02.766+00	166	Prepare a quick sort algorithm and explain with suitable example Give its worst case, average case and best case time complexities.	1	[{"added": {}}]	16	1
170	2022-11-24 13:36:19.57+00	167	If the depth of the binary tree is k, the maximum number of nodes in the\r\nbinary tree is 2k-1.Justify	1	[{"added": {}}]	16	1
171	2022-11-24 13:36:24.055+00	167	If the depth of the binary tree is k, the maximum number of nodes in the\r\nbinary tree is 2k-1.Justify	2	[]	16	1
172	2022-11-24 13:37:10.9+00	168	Define a fully binary tree.Give an example.	1	[{"added": {}}]	16	1
173	2022-11-24 13:40:49.794+00	3	Trees | CS3351 | Data Structures | IDK	2	[]	10	1
174	2022-11-24 13:41:26.813+00	3	Trees | CS3351 | Data Structures | IDK	2	[]	10	1
175	2022-11-24 13:44:27.57+00	169	Create an expression tree for the expression.a*(b+c)+((d+e*f)*g)	1	[{"added": {}}]	16	1
176	2022-11-24 13:44:32.682+00	169	Create an expression tree for the expression.a*(b+c)+((d+e*f)*g)	2	[]	16	1
177	2022-11-24 13:45:37.511+00	170	Illustrate Kruskal’s algorithm to find the minimum spanning tree of a graph.	1	[{"added": {}}]	16	1
178	2022-11-24 13:45:44.281+00	171	How does the AVL tree differ from binary search tree?	1	[{"added": {}}]	16	1
179	2022-11-24 13:45:57.553+00	172	Compare any two applications of Graph with your own example	1	[{"added": {}}]	16	1
180	2022-11-24 13:46:27.475+00	173	Describe any one of the shortest path algorithms with suitable example	1	[{"added": {}}]	16	1
181	2022-11-24 13:46:39.396+00	174	What are the various rotations in AVL trees?	1	[{"added": {}}]	16	1
182	2022-11-24 13:46:49.238+00	175	Discuss the prims algorithm for minmum spanning tree.Give an example.	1	[{"added": {}}]	16	1
183	2022-11-24 13:47:33.328+00	176	List the applications of trees.	1	[{"added": {}}]	16	1
184	2022-11-24 13:47:33.633+00	177	Develop an algorithm to compute the shortest path using Dijkstra’s algorithm. Validate the algorithm with suitable example.	1	[{"added": {}}]	16	1
185	2022-11-24 13:47:57.425+00	178	Explain the depth first approach of finding articulation points in a connected graph with necessary algorithm.	1	[{"added": {}}]	16	1
186	2022-11-24 13:48:35.513+00	179	Write short notes on Bi-connectivity.	1	[{"added": {}}]	16	1
187	2022-11-24 13:48:54.238+00	180	Express different types of graphs with example.	1	[{"added": {}}]	16	1
188	2022-11-24 13:49:21.966+00	181	Given the adjacency matrix of a graph, write a program to calculate the in- degree and the out-degree of a node N in the graph.	1	[{"added": {}}]	16	1
189	2022-11-24 13:49:23.311+00	182	What are threaded binary trees? Give its advantages	1	[{"added": {}}]	16	1
190	2022-11-24 13:49:42.864+00	183	How can we efficiently check whether or not a graph is disconnected?	1	[{"added": {}}]	16	1
191	2022-11-24 13:49:56.773+00	184	Describe an algorithm that uses a brute force approach to find all the articulation points in G in O(V (V + E)) time.	1	[{"added": {}}]	16	1
192	2022-11-24 13:50:16.027+00	185	Given a rooted tree, one desires to find the shortest path from the root to a given node v. Which algorithm would one use to find this shortest path.	1	[{"added": {}}]	16	1
193	2022-11-24 13:50:26.536+00	186	9\tDefine balance factor of AVL Tree.\tBT 1\tRemember	1	[{"added": {}}]	16	1
194	2022-11-24 13:50:38.02+00	187	Write a program to determine whether there is at least one path from the source to the destination.	1	[{"added": {}}]	16	1
195	2022-11-24 13:50:53.257+00	188	How do we calculate the balance factor for each node in a AVL tree?	1	[{"added": {}}]	16	1
196	2022-11-24 13:51:31.574+00	189	Simulate the result of inserting 3,1,4,6,2,8,9 into an initially empty AVL Tree.	1	[{"added": {}}]	16	1
197	2022-11-24 13:51:51.752+00	1	2021 | 3 | UG | BE | CSE | 1 | Lists | CS3351 | Data Structures | IDK	1	[{"added": {}}]	19	1
198	2022-11-24 13:51:56.918+00	2	2021 | 3 | UG | BE | CSE | 2 | Stacks and Queues | CS3351 | Data Structures | IDK	1	[{"added": {}}]	19	1
199	2022-11-24 13:52:06.435+00	190	12\tGive an example for expression tree.\tBT 2\tUnderstand	1	[{"added": {}}]	16	1
200	2022-11-24 13:52:11.268+00	3	2021 | 3 | UG | BE | CSE | 3 | Graphs | CS3351 | Data Structures | IDK	1	[{"added": {}}]	19	1
201	2022-11-24 13:52:19.833+00	4	2021 | 3 | UG | BE | CSE | 4 | Sorting, Searching and Hash Techniques | CS3351 | Data Structures | IDK	1	[{"added": {}}]	19	1
202	2022-11-24 13:52:28.717+00	5	2021 | 3 | UG | BE | CSE | 5 | Trees | CS3351 | Data Structures | IDK	1	[{"added": {}}]	19	1
203	2022-11-24 13:52:38.955+00	191	Number the following binary tree to traverse it in i.Preorder\r\nii.Inorder	1	[{"added": {}}]	16	1
204	2022-11-24 13:53:20.518+00	192	Explain why binary search cannot be performed on a linked list.	1	[{"added": {}}]	16	1
205	2022-11-24 13:54:20.215+00	193	How do you calculate the depth of a B-Tree?	1	[{"added": {}}]	16	1
206	2022-11-24 13:55:01.572+00	194	List out the various operations that can be performed on B-trees	1	[{"added": {}}]	16	1
207	2022-11-24 13:55:32.46+00	195	List out the properties of B+ -Trees	1	[{"added": {}}]	16	1
208	2022-11-24 13:56:02.085+00	196	Illustrate the steps in the construction of a heap of records with the following key values:12,33,67,8,7,80,5,23	1	[{"added": {}}]	16	1
209	2022-11-24 13:56:38.533+00	197	Analyze the properties of binary heap.	1	[{"added": {}}]	16	1
210	2022-11-24 13:57:30.232+00	198	Define a heap and show how it can be used to represent a priority queue	1	[{"added": {}}]	16	1
211	2022-11-24 13:59:29.04+00	199	Write an algorithm for preorder, inorder and postorder traversal of a binary tree.	1	[{"added": {}}]	16	1
212	2022-11-24 14:00:27.506+00	200	Explain the following operations on a binary search tree with suitable algorithms\r\ni.\tFind a node	1	[{"added": {}}]	16	1
213	2022-11-24 14:01:25.238+00	201	Explain the following operations on a binary search tree with suitable algorithms\r\n\r\ni.\tFind the minimum and maximum elements of binary search tree	1	[{"added": {}}]	16	1
214	2022-11-24 14:01:56.886+00	202	i.\tWrite short notes on threaded binary tree	1	[{"added": {}}]	16	1
215	2022-11-24 14:02:39.204+00	203	Describe an iterative algorithm to traverse a tree in preorder	1	[{"added": {}}]	16	1
216	2022-11-24 14:03:16.565+00	204	Write an algorithm for inserting and deleting a node in a binary search tree.	1	[{"added": {}}]	16	1
217	2022-11-24 14:03:56.808+00	205	Discuss in detail the various methods in which a binary tree can be represented. Discuss the advantage and disadvantage of each method	1	[{"added": {}}]	16	1
218	2022-11-24 14:05:33.719+00	202	Write short notes on threaded binary tree	2	[{"changed": {"fields": ["Question"]}}]	16	1
219	2022-11-24 14:05:52.063+00	190	Give an example for expression tree.	2	[{"changed": {"fields": ["Question"]}}]	16	1
220	2022-11-24 14:05:56.911+00	206	Explain the B+ tree and its properties with an Example	1	[{"added": {}}]	16	1
221	2022-11-24 14:06:10.058+00	186	Define balance factor of AVL Tree.	2	[{"changed": {"fields": ["Question"]}}]	16	1
222	2022-11-24 14:06:13.532+00	186	Define balance factor of AVL Tree.	2	[]	16	1
223	2022-11-24 14:07:10.039+00	207	What are the steps to convert general tree to binary tree?	1	[{"added": {}}]	16	1
224	2022-11-24 14:07:48.541+00	208	i.\tConstruct B Tree to insert the following key elements(order of the tree is 3) 5,2,13,3,45,72,4,6,9,22	1	[{"added": {}}]	16	1
225	2022-11-24 14:09:20.348+00	209	ii.\tDraw a B Tree of order 6	1	[{"added": {}}]	16	1
226	2022-11-24 14:10:09.743+00	210	Discuss how to insert an element in a AVL tree, Explain with algorithm.	1	[{"added": {}}]	16	1
227	2022-11-24 14:10:47.731+00	211	Explain how deletion can take place in AVL trees with suitable algorithms	1	[{"added": {}}]	16	1
228	2022-11-24 14:11:23.983+00	212	i.\tWhat are AVL trees? Describe the different rotations defined for AVL tree.	1	[{"added": {}}]	16	1
229	2022-11-24 14:12:28.09+00	213	ii.\tInsert the following elements step by step in sequence into an empty AVL\r\ntree 15,18,20,21,28,2330,26	1	[{"added": {}}]	16	1
230	2022-11-24 14:13:41.419+00	214	Point out the operations of B-tree using 2-3 tree.	1	[{"added": {}}]	16	1
231	2022-11-24 14:13:49.451+00	208	Construct B Tree to insert the following key elements(order of the tree is 3) 5,2,13,3,45,72,4,6,9,22	2	[{"changed": {"fields": ["Question"]}}]	16	1
232	2022-11-24 14:13:59.12+00	209	Draw a B Tree of order 6	2	[{"changed": {"fields": ["Question"]}}]	16	1
233	2022-11-24 14:14:11.198+00	212	What are AVL trees? Describe the different rotations defined for AVL tree.	2	[{"changed": {"fields": ["Question"]}}]	16	1
234	2022-11-24 14:14:18.588+00	213	Insert the following elements step by step in sequence into an empty AVL\r\ntree 15,18,20,21,28,2330,26	2	[{"changed": {"fields": ["Question"]}}]	16	1
235	2022-11-24 14:14:23.405+00	215	Explain the operations of threaded binary tree.	1	[{"added": {}}]	16	1
236	2022-11-24 14:15:29.219+00	216	Discuss the different traversal technique in binary tree with suitable algorithms and examples?	1	[{"added": {}}]	16	1
237	2022-11-24 14:16:13.775+00	217	Explain the construction of expression tree with example.	1	[{"added": {}}]	16	1
238	2022-11-24 14:17:00.069+00	218	Give the applications of trees	1	[{"added": {}}]	16	1
239	2022-11-24 14:17:30.792+00	219	i.\tShow the result of inserting 15,17,6,19,11,10,13,20,8,14,12 one at a time into an initially empty binary min heap.	1	[{"added": {}}]	16	1
240	2022-11-24 14:18:12.574+00	220	ii.\tShow the result of performing three delete min operations in the final binary min heap obtained	1	[{"added": {}}]	16	1
241	2022-11-24 14:18:32.849+00	219	Show the result of inserting 15,17,6,19,11,10,13,20,8,14,12 one at a time into an initially empty binary min heap.	2	[{"changed": {"fields": ["Question"]}}]	16	1
242	2022-11-24 14:18:41.049+00	220	Show the result of performing three delete min operations in the final binary min heap obtained	2	[{"changed": {"fields": ["Question"]}}]	16	1
243	2022-11-24 14:19:58.455+00	221	Illustrate How delete operation performed on binary heap?	1	[{"added": {}}]	16	1
244	2022-11-24 14:20:43.804+00	222	ii.\tWrite a suitable operations for procolate up and percolate down operations in a binary heap	1	[{"added": {}}]	16	1
245	2022-11-24 14:20:55.404+00	222	Write a suitable operations for procolate up and percolate down operations in a binary heap	2	[{"changed": {"fields": ["Question"]}}]	16	1
246	2022-11-24 14:21:41.683+00	223	Compare B trees with B+ trees.	1	[{"added": {}}]	16	1
247	2022-11-24 14:22:26.185+00	224	Create a B+ tree of order 5 for the following data arriving in sequence:\r\n90, 27, 7, 9, 18, 21, 3, 4, 16, 11, 21, 72	1	[{"added": {}}]	16	1
248	2022-11-24 14:23:58.581+00	225	Draw B – Tree pf order m = 5 for the keys\r\n{K, O,S,V,MF,B,G,T,U,W}	1	[{"added": {}}]	16	1
249	2022-11-24 14:25:05.383+00	226	Delete the keys K and G in order.	1	[{"added": {}}]	16	1
250	2022-11-24 14:25:59.939+00	227	Justify the number of splits needed for inserts / delete with proper reasons.	1	[{"added": {}}]	16	1
251	2022-11-24 14:31:10.044+00	226	1)Draw B – Tree pf order m = 5 for the keys\r\n{K, O,S,V,MF,B,G,T,U,W}\r\n2)Delete the keys K and G in order.	2	[{"changed": {"fields": ["Question", "Mark"]}}]	16	1
252	2022-11-24 14:32:17.393+00	227	i.\tDraw B – Tree pf order m = 5 for the keys\r\n{K, O,S,V,MF,B,G,T,U,W}\t\r\nii.\tDelete the keys K and G in order. \r\niii.\tJustify the number of splits needed for inserts / delete with proper reasons.	2	[{"changed": {"fields": ["Question", "Mark"]}}]	16	1
285	2022-11-24 15:06:05.816+00	228	dummy	1	[{"added": {}}]	16	1
286	2022-11-24 15:06:28.092+00	229	dummy	1	[{"added": {}}]	16	1
287	2022-11-24 15:11:16.013+00	229	dummy	3		16	1
288	2022-11-24 15:11:16.027+00	228	dummy	3		16	1
289	2022-11-24 15:14:31.007+00	230	Consider the binary search tree given below.\r\nFind the result of in-order, pre-order, and post-order traversals. Show the deletion of the root node\r\nInsert 11, 22, 33, 44, 55, 66, and 77 in the tree	1	[{"added": {}}]	16	1
290	2022-11-24 17:24:18.753+00	230	Consider the binary search tree given below.\r\nFind the result of in-order, pre-order, and post-order traversals. Show the deletion of the root node\r\nInsert 11, 22, 33, 44, 55, 66, and 77 in the tree	3		16	1
291	2022-11-24 17:29:22.112+00	181	Given the adjacency matrix of a graph, write a program to calculate the in- degree and the out-degree of a node N in the graph.	2	[{"changed": {"fields": ["Previous years"]}}]	16	1
292	2022-11-24 17:31:35.466+00	181	Given the adjacency matrix of a graph, write a program to calculate the in- degree and the out-degree of a node N in the graph.	2	[{"changed": {"fields": ["Previous years"]}}]	16	1
293	2022-11-24 17:37:27.835+00	181	Given the adjacency matrix of a graph, write a program to calculate the in- degree and the out-degree of a node N in the graph.	2	[{"changed": {"fields": ["Previous years"]}}]	16	1
294	2022-11-24 17:57:33.679+00	160	Explain a C code to sort an integer array using Selection Sort and Radix Sort.	2	[{"changed": {"fields": ["Previous years"]}}]	16	1
295	2022-11-24 17:59:24.339+00	160	Explain a C code to sort an integer array using Selection Sort and Radix Sort.	2	[{"changed": {"fields": ["Previous years"]}}]	16	1
296	2022-11-24 17:59:39.7+00	181	Given the adjacency matrix of a graph, write a program to calculate the in- degree and the out-degree of a node N in the graph.	2	[{"changed": {"fields": ["Previous years"]}}]	16	1
297	2022-11-24 18:00:05.321+00	181	Given the adjacency matrix of a graph, write a program to calculate the in- degree and the out-degree of a node N in the graph.	2	[{"changed": {"fields": ["Previous years"]}}]	16	1
298	2023-01-16 12:05:57.249+00	1	2021 | 3 | UG | BE | CSE | CS3351 | Data Structures | IDK	1	[{"added": {}}]	20	1
299	2023-01-27 08:28:07.822+00	2	dhanus3133@gmail.com	1	[{"added": {}}]	7	1
300	2023-01-27 08:28:46.103+00	1	2021 | 3 | UG | BE | CSE | CS3351 | Data Structures | IDK	2	[{"changed": {"fields": ["Faculties"]}}]	20	1
301	2023-01-27 08:46:20.629+00	2	dhanus3133@gmail.com	3		7	1
302	2023-01-27 09:41:34.417+00	1	2021 | 3 | UG | BE | CSE | CS3351 | Data Structures | IDK	2	[]	20	1
303	2023-01-27 09:41:59.352+00	3	test@qpgen.com	1	[{"added": {}}]	7	1
304	2023-01-27 09:42:36.173+00	1	2021 | 3 | UG | BE | CSE | CS3351 | Data Structures | IDK	2	[{"changed": {"fields": ["Faculties"]}}]	20	1
305	2023-02-07 09:55:56.04+00	2	CS2105 | Problem Solving using Python | CO	1	[{"added": {}}]	15	1
306	2023-02-07 09:56:28.613+00	6	Computational Thinking and Problem Solving | CS2105 | Problem Solving using Python | CO	1	[{"added": {}}]	10	1
307	2023-02-07 09:56:50.751+00	7	Data Types, Expressions, Statement | CS2105 | Problem Solving using Python | CO	1	[{"added": {}}]	10	1
308	2023-02-07 09:57:06.438+00	8	Control Flow, Functions, Strings | CS2105 | Problem Solving using Python | CO	1	[{"added": {}}]	10	1
309	2023-02-07 09:57:16.052+00	9	List, Tuple, Dictionary | CS2105 | Problem Solving using Python | CO	1	[{"added": {}}]	10	1
310	2023-02-07 09:57:27.313+00	10	Files, Modules, Package | CS2105 | Problem Solving using Python | CO	1	[{"added": {}}]	10	1
311	2023-02-07 09:57:38.389+00	6	2021 | 3 | UG | BE | CSE | 1 | Computational Thinking and Problem Solving | CS2105 | Problem Solving using Python | CO	1	[{"added": {}}]	19	1
312	2023-02-07 09:57:46.603+00	7	2021 | 3 | UG | BE | CSE | 2 | Data Types, Expressions, Statement | CS2105 | Problem Solving using Python | CO	1	[{"added": {}}]	19	1
313	2023-02-07 09:57:53.004+00	8	2021 | 3 | UG | BE | CSE | 3 | Control Flow, Functions, Strings | CS2105 | Problem Solving using Python | CO	1	[{"added": {}}]	19	1
314	2023-02-07 09:57:58.506+00	9	2021 | 3 | UG | BE | CSE | 4 | List, Tuple, Dictionary | CS2105 | Problem Solving using Python | CO	1	[{"added": {}}]	19	1
315	2023-02-07 09:58:05.178+00	10	2021 | 3 | UG | BE | CSE | 5 | Files, Modules, Package | CS2105 | Problem Solving using Python | CO	1	[{"added": {}}]	19	1
316	2023-02-07 09:58:24.372+00	2	2021 | 3 | UG | BE | CSE | CS2105 | Problem Solving using Python | CO	1	[{"added": {}}]	20	1
317	2023-02-08 05:43:42.457+00	2	2021 | 3 | UG | BE | CSE | CS2105 | Problem Solving using Python | CO	2	[{"changed": {"fields": ["Faculties"]}}]	20	1
318	2023-02-09 16:36:36.17+00	2	2021 | 3 | UG | BE | CSE | CS2105 | Problem Solving using Python | CO	2	[{"changed": {"fields": ["Faculties"]}}]	20	1
319	2023-02-09 16:38:04.459+00	1	2021 | 3 | UG | BE | CSE	2	[{"changed": {"fields": ["Active"]}}]	18	1
320	2023-02-09 16:38:31.784+00	1	2021 | 3 | UG | BE | CSE	2	[{"changed": {"fields": ["Active"]}}]	18	1
321	2023-02-11 04:38:06.329+00	1	questions/Screenshot_2023-01-17_151438.png	2	[{"changed": {"fields": ["Photo"]}}]	21	1
322	2023-02-13 05:45:17.392+00	1	Lists | CS3351 | Data Structures | IDK	2	[{"changed": {"fields": ["Objective", "Outcome"]}}]	10	1
323	2023-02-13 05:45:35.442+00	2	Stacks and Queues | CS3351 | Data Structures | IDK	2	[{"changed": {"fields": ["Objective", "Outcome"]}}]	10	1
324	2023-02-13 05:45:42.743+00	3	Trees | CS3351 | Data Structures | IDK	2	[{"changed": {"fields": ["Objective", "Outcome"]}}]	10	1
325	2023-02-13 05:45:51.209+00	4	Graphs | CS3351 | Data Structures | IDK	2	[{"changed": {"fields": ["Objective", "Outcome"]}}]	10	1
326	2023-02-13 05:45:59.222+00	5	Sorting, Searching and Hash Techniques | CS3351 | Data Structures | IDK	2	[{"changed": {"fields": ["Objective", "Outcome"]}}]	10	1
327	2023-02-13 05:58:30.85+00	4	Graphs | CS3351 | Data Structures | IDK	2	[{"changed": {"fields": ["Objective", "Outcome"]}}]	10	1
328	2023-02-13 05:58:39.895+00	3	Trees | CS3351 | Data Structures | IDK	2	[{"changed": {"fields": ["Objective", "Outcome"]}}]	10	1
329	2023-02-13 06:00:18.648+00	5	Sorting, Searching and Hash Techniques | CS3351 | Data Structures | IDK	2	[{"changed": {"fields": ["Objective", "Outcome"]}}]	10	1
330	2023-02-13 06:00:26.33+00	3	Trees | CS3351 | Data Structures | IDK	2	[{"changed": {"fields": ["Objective", "Outcome"]}}]	10	1
331	2023-02-13 07:32:01.419+00	1	Lists | CS3351 | Data Structures | IDK	2	[{"changed": {"fields": ["Objective", "Outcome"]}}]	10	1
332	2023-02-13 07:32:02.082+00	2	Stacks and Queues | CS3351 | Data Structures | IDK	2	[{"changed": {"fields": ["Objective", "Outcome"]}}]	10	1
333	2023-02-13 07:32:02.783+00	4	Graphs | CS3351 | Data Structures | IDK	2	[{"changed": {"fields": ["Objective", "Outcome"]}}]	10	1
334	2023-02-13 07:32:03.555+00	5	Sorting, Searching and Hash Techniques | CS3351 | Data Structures | IDK	2	[{"changed": {"fields": ["Objective", "Outcome"]}}]	10	1
335	2023-02-13 07:32:04.211+00	3	Trees | CS3351 | Data Structures | IDK	2	[{"changed": {"fields": ["Objective", "Outcome"]}}]	10	1
336	2023-02-16 05:07:41.398+00	3	admin@admin.com	1	[{"added": {}}]	23	1
337	2023-02-19 03:24:54.41+00	243	I am Ironman	3		16	1
338	2023-02-19 03:24:54.416+00	242	asdfsdf	3		16	1
339	2023-02-19 03:24:54.423+00	241	Dhanus new2	3		16	1
340	2023-02-19 03:24:54.426+00	240	Dhans	3		16	1
341	2023-02-19 03:24:54.428+00	239	asdfasabvavdasdf	3		16	1
342	2023-02-19 03:24:54.43+00	238	fsadfasdfsdagfdahrbr	3		16	1
343	2023-02-19 03:24:54.432+00	237	new asdfsf	3		16	1
344	2023-02-19 03:24:54.434+00	236	12345	3		16	1
345	2023-02-19 03:24:54.437+00	235	1234	3		16	1
346	2023-02-19 03:24:54.439+00	234	123	3		16	1
347	2023-02-19 03:24:54.441+00	233	12	3		16	1
348	2023-02-19 03:24:54.443+00	232	a\n\nsfdsdf	3		16	1
349	2023-02-19 03:24:54.446+00	231	2	3		16	1
350	2023-02-19 03:24:54.448+00	230	First question new	3		16	1
351	2023-02-19 03:24:54.45+00	229	New question new\n\n![Screenshot20230117151438.png](/backend_media/questions/a4b7202b-9544-49f9-9d30-7d789708c5c5_Screenshot_2023-01-17_151438.png)	3		16	1
352	2023-02-19 03:24:54.452+00	228	New question 2	3		16	1
353	2023-02-25 10:51:55.882763+00	2	UG | BTECH | IT	1	[{"added": {}}]	17	1
354	2023-02-25 10:51:58.717177+00	2	2021 | 3 | UG | BTECH | IT	1	[{"added": {}}]	18	1
355	2023-02-25 10:52:53.256354+00	1	CreateSyllabus object (1)	1	[{"added": {}}]	25	1
356	2023-02-25 14:52:09.822581+00	4	sdfs | dfsdf | sdf	2	[]	15	1
357	2023-02-25 17:05:15.02465+00	56	2021 | 3 | UG | BE | CSE | 2 | Lists | CS3351 | Data Structures | IDK	1	[{"added": {}}]	19	1
358	2023-02-25 17:05:17.453248+00	56	2021 | 3 | UG | BE | CSE | 2 | Lists | CS3351 | Data Structures | IDK	2	[]	19	1
359	2023-02-25 17:05:28.968877+00	56	2021 | 3 | UG | BE | CSE | 2 | Lists | CS3351 | Data Structures | IDK	3		19	1
360	2023-02-25 17:06:08.976862+00	61	2021 | 3 | UG | BE | CSE | 3 | Lists | CS3351 | Data Structures | IDK	3		19	1
361	2023-02-25 17:06:08.987991+00	58	2021 | 3 | UG | BE | CSE | 2 | Lists | CS3351 | Data Structures | IDK	3		19	1
390	2023-02-25 17:26:24.997741+00	5	CreateSyllabus object (5)	3		25	1
391	2023-02-25 17:26:25.009127+00	3	CreateSyllabus object (3)	3		25	1
392	2023-02-25 17:28:58.449378+00	1	CreateSyllabus object (1)	2	[{"changed": {"fields": ["Is completed"]}}]	25	1
393	2023-02-25 17:30:35.05898+00	1	CreateSyllabus object (1)	2	[{"changed": {"fields": ["Is completed"]}}]	25	1
394	2023-02-25 17:41:58.711817+00	114	2021 | 3 | UG | BTECH | IT | 4 | Graphs | CS3351 | Data Structures | IDK	3		19	1
395	2023-02-25 17:41:58.723565+00	111	2021 | 3 | UG | BTECH | IT | 4 | Lesson 2 | sdfs | dfsdf | sdf	3		19	1
396	2023-02-25 17:41:58.725836+00	109	2021 | 3 | UG | BTECH | IT | 4 | Iron 1 | sdfs | dfsdf | sdf	3		19	1
397	2023-02-25 17:41:58.729031+00	108	2021 | 3 | UG | BTECH | IT | 4 | My Lessonss | CS2105 | Problem Solving using Python | CO	3		19	1
398	2023-02-25 17:41:58.733844+00	107	2021 | 3 | UG | BTECH | IT | 4 | My Lessons | CS2105 | Problem Solving using Python | CO	3		19	1
399	2023-02-25 17:41:58.736888+00	106	2021 | 3 | UG | BTECH | IT | 4 | My Lesson | CS2105 | Problem Solving using Python | CO	3		19	1
400	2023-02-25 17:41:58.739111+00	105	2021 | 3 | UG | BTECH | IT | 4 | 1 | CS3351 | Data Structures | IDK	3		19	1
401	2023-02-25 17:41:58.740871+00	102	2021 | 3 | UG | BTECH | IT | 0 | hello | TONY | Avengers | IRON	3		19	1
402	2023-02-25 17:41:58.742848+00	100	2021 | 3 | UG | BTECH | IT | 0 | Files, Modules, Package | CS2105 | Problem Solving using Python | CO	3		19	1
403	2023-02-25 17:41:58.744761+00	86	2021 | 3 | UG | BTECH | IT | 0 | Lists | CS3351 | Data Structures | IDK	3		19	1
404	2023-02-26 04:05:15.607547+00	1	CreateSyllabus object (1)	2	[{"changed": {"fields": ["Is completed"]}}]	25	1
405	2023-02-26 04:10:51.807332+00	12	1 | CS3351 | Data Structures | IDK	3		10	1
406	2023-02-26 04:21:18.619696+00	1	CreateSyllabus object (1)	2	[{"changed": {"fields": ["Is completed"]}}]	25	1
407	2023-02-26 04:21:29.632217+00	1	CreateSyllabus object (1)	2	[{"changed": {"fields": ["Is completed"]}}]	25	1
408	2023-02-26 04:24:01.379435+00	1	CreateSyllabus object (1)	2	[{"changed": {"fields": ["Is completed"]}}]	25	1
409	2023-02-26 04:29:44.984122+00	129	2021 | 3 | UG | BTECH | IT | 5 | Lists | CS3351 | Data Structures | IDK	3		19	1
410	2023-02-26 04:29:44.997938+00	128	2021 | 3 | UG | BTECH | IT | 4 | Graphs | CS3351 | Data Structures | IDK	3		19	1
411	2023-02-26 04:29:44.999559+00	127	2021 | 3 | UG | BTECH | IT | 3 | Trees | CS3351 | Data Structures | IDK	3		19	1
412	2023-02-26 04:29:45.000989+00	126	2021 | 3 | UG | BTECH | IT | 2 | Stacks and Queues | CS3351 | Data Structures | IDK	3		19	1
413	2023-02-26 04:29:45.002199+00	125	2021 | 3 | UG | BTECH | IT | 1 | Sorting, Searching and Hash Techniques | CS3351 | Data Structures | IDK	3		19	1
414	2023-02-26 04:30:37.743629+00	135	2021 | 3 | UG | BTECH | IT | 5 | Lists | CS3351 | Data Structures | IDK	3		19	1
415	2023-02-26 04:30:37.753237+00	134	2021 | 3 | UG | BTECH | IT | 4 | Graphs | CS3351 | Data Structures | IDK	3		19	1
416	2023-02-26 04:30:37.762725+00	133	2021 | 3 | UG | BTECH | IT | 3 | Trees | CS3351 | Data Structures | IDK	3		19	1
417	2023-02-26 04:30:37.765162+00	132	2021 | 3 | UG | BTECH | IT | 2 | Stacks and Queues | CS3351 | Data Structures | IDK	3		19	1
418	2023-02-26 04:30:37.766907+00	131	2021 | 3 | UG | BTECH | IT | 1 | Sorting, Searching and Hash Techniques | CS3351 | Data Structures | IDK	3		19	1
419	2023-02-26 04:32:12.917443+00	142	2021 | 3 | UG | BTECH | IT | 5 | Lists | CS3351 | Data Structures | IDK	3		19	1
420	2023-02-26 04:32:12.927522+00	141	2021 | 3 | UG | BTECH | IT | 4 | Graphs | CS3351 | Data Structures | IDK	3		19	1
421	2023-02-26 04:32:12.929521+00	140	2021 | 3 | UG | BTECH | IT | 3 | Trees | CS3351 | Data Structures | IDK	3		19	1
422	2023-02-26 04:32:12.930959+00	139	2021 | 3 | UG | BTECH | IT | 2 | Stacks and Queues | CS3351 | Data Structures | IDK	3		19	1
423	2023-02-26 04:32:12.932152+00	138	2021 | 3 | UG | BTECH | IT | 1 | Sorting, Searching and Hash Techniques | CS3351 | Data Structures | IDK	3		19	1
424	2023-02-26 04:35:10.406653+00	3	2021 | 3 | UG | BTECH | IT | CS3351 | Data Structures | IDK	1	[{"added": {}}]	20	1
425	2023-02-26 08:31:55.716016+00	13	dhanus@citchennai.net	2	[{"changed": {"fields": ["Email Address", "First name", "Last name"]}}]	7	1
\.


--
-- Data for Name: django_content_type; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.django_content_type (id, app_label, model) FROM stdin;
1	admin	logentry
2	auth	permission
3	auth	group
4	contenttypes	contenttype
5	sessions	session
6	refresh_token	refreshtoken
7	users	user
8	questions	bloomstaxonomylevel
9	questions	degree
10	questions	lesson
11	questions	markrange
12	questions	previousyearsqp
13	questions	programme
14	questions	regulation
15	questions	subject
16	questions	question
17	questions	department
18	questions	course
19	questions	syllabus
20	questions	facultieshandling
21	questions	image
22	questions	topic
23	coe	coe
24	users	newuser
25	questions	createsyllabus
\.


--
-- Data for Name: django_migrations; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.django_migrations (id, app, name, applied) FROM stdin;
1	contenttypes	0001_initial	2023-02-25 10:44:05.381547+00
2	contenttypes	0002_remove_content_type_name	2023-02-25 10:44:05.38828+00
3	auth	0001_initial	2023-02-25 10:44:05.424171+00
4	auth	0002_alter_permission_name_max_length	2023-02-25 10:44:05.428921+00
5	auth	0003_alter_user_email_max_length	2023-02-25 10:44:05.433476+00
6	auth	0004_alter_user_username_opts	2023-02-25 10:44:05.439605+00
7	auth	0005_alter_user_last_login_null	2023-02-25 10:44:05.443901+00
8	auth	0006_require_contenttypes_0002	2023-02-25 10:44:05.446152+00
9	auth	0007_alter_validators_add_error_messages	2023-02-25 10:44:05.451124+00
10	auth	0008_alter_user_username_max_length	2023-02-25 10:44:05.456241+00
11	auth	0009_alter_user_last_name_max_length	2023-02-25 10:44:05.460784+00
12	auth	0010_alter_group_name_max_length	2023-02-25 10:44:05.465854+00
13	auth	0011_update_proxy_permissions	2023-02-25 10:44:05.471452+00
14	auth	0012_alter_user_first_name_max_length	2023-02-25 10:44:05.476146+00
15	users	0001_initial	2023-02-25 10:44:05.517813+00
16	admin	0001_initial	2023-02-25 10:44:05.53512+00
17	admin	0002_logentry_remove_auto_add	2023-02-25 10:44:05.541817+00
18	admin	0003_logentry_add_action_flag_choices	2023-02-25 10:44:05.548514+00
19	coe	0001_initial	2023-02-25 10:44:05.562593+00
20	coe	0002_coe_active	2023-02-25 10:44:05.570436+00
21	questions	0001_initial	2023-02-25 10:44:05.816642+00
22	questions	0002_alter_previousyearsqp_month	2023-02-25 10:44:05.830974+00
23	questions	0003_image	2023-02-25 10:44:05.838315+00
24	questions	0004_remove_image_name_alter_image_photo	2023-02-25 10:44:05.844571+00
25	questions	0005_rename_created_at_image_uploaded_at_and_more	2023-02-25 10:44:05.849832+00
26	questions	0006_topic_question_topics	2023-02-25 10:44:05.89511+00
27	questions	0007_alter_question_created_by	2023-02-25 10:44:05.907536+00
28	questions	0008_topic_active_topic_priority	2023-02-25 10:44:05.920738+00
29	questions	0009_alter_previousyearsqp_year_alter_regulation_year	2023-02-25 10:44:05.934273+00
30	questions	0010_alter_question_lesson	2023-02-25 10:44:05.946779+00
31	questions	0011_alter_question_lesson	2023-02-25 10:44:05.959427+00
32	questions	0012_alter_question_lesson	2023-02-25 10:44:05.97347+00
33	questions	0013_remove_subject_co_description_remove_subject_coe_and_more	2023-02-25 10:44:06.012017+00
34	questions	0014_lesson_outcome_btl	2023-02-25 10:44:06.031851+00
35	refresh_token	0001_initial	2023-02-25 10:44:06.063669+00
36	refresh_token	0002_auto_20190130_0900	2023-02-25 10:44:06.073463+00
37	sessions	0001_initial	2023-02-25 10:44:06.088976+00
38	users	0002_alter_user_managers	2023-02-25 10:44:06.098634+00
39	users	0003_remove_user_username	2023-02-25 10:44:06.110403+00
67	questions	0015_question_priority	2023-02-25 10:44:26.794228+00
68	questions	0016_alter_course_department_alter_course_regulation_and_more	2023-02-25 10:44:26.984734+00
69	questions	0017_createsubject	2023-02-25 10:44:27.015477+00
70	questions	0018_alter_createsubject_secret	2023-02-25 10:44:27.027164+00
71	questions	0019_alter_createsubject_subject	2023-02-25 10:44:27.040791+00
72	questions	0020_remove_lesson_outcome_btl_lesson_outcome_btl	2023-02-25 10:44:27.083088+00
73	questions	0021_createsyllabus_delete_createsubject	2023-02-25 10:44:27.121125+00
74	questions	0022_alter_createsyllabus_syllabus	2023-02-25 10:44:27.135329+00
75	users	0004_newusers	2023-02-25 10:44:27.144689+00
76	users	0005_rename_newusers_newuser	2023-02-25 10:44:27.163891+00
77	users	0006_rename_email_verfied_newuser_email_verified	2023-02-25 10:44:27.168343+00
78	users	0007_alter_newuser_email_alter_newuser_password	2023-02-25 10:44:27.175821+00
79	users	0008_alter_newuser_email	2023-02-25 10:44:27.184034+00
80	users	0009_alter_newuser_email_secret	2023-02-25 10:44:27.189115+00
81	users	0010_newuser_approved	2023-02-25 10:44:27.194972+00
82	questions	0023_alter_createsyllabus_syllabus	2023-02-25 16:56:54.111705+00
83	questions	0024_alter_syllabus_unique_together	2023-02-25 17:06:44.860965+00
84	questions	0025_question_scenario_based	2023-02-26 08:02:27.626363+00
\.


--
-- Data for Name: django_session; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.django_session (session_key, session_data, expire_date) FROM stdin;
2ctn6tipq931jngptos0nbfpch44bvvd	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1pQO3E:Xgxon1q2wmiuayCdUqYuPvUnDgZIGC_z-OZ6jfyVxe4	2023-02-24 07:42:32.383+00
34d0d454utbfl3qavlsp40mm8uv9mgiv	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1oyAM0:iX_TzxcUfUbExvmUBdaqJPn2zoMQetteiSdb_oqNbvQ	2022-12-08 11:25:16.704+00
7aes4glbex3jdw07tu0p6cnm3f887dt5	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1pRSDM:JtM7x88qAZBqHr6XlKp-OftTf8sY6XcFoVzmdNHV6kM	2023-02-27 06:21:24.138+00
7wcqtl43xdeebok4nkb8e4tzou4ldy05	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1oyAca:lszO7Eo_QocpwFFBuV2j7-1p8Wx-iau5dHgu0LP-VA4	2022-12-08 11:42:24.547+00
8gaowpc0s11kyyelqyus89eufz3urduy	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1oyBv6:0u8wvxgYq7aiTzrfeCmscuFIYhJxrwYUh3xrcD3ozQo	2022-12-08 13:05:36.177+00
bjazfj883g22rlegp6huih5l9ycs6xky	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1pPKf0:-LCAjQ1GuCCTrG-cX-O44TtTr2gsr4d7whfH2TkyRjI	2023-02-21 09:53:10.597+00
bklnd0cam5yuwczn3s0ogn7a6goznw44	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1pQ9tv:2EMrCd5Renbeybj0S8atzf-uV8ppxwYP2Ndv7mcDL8Q	2023-02-23 16:35:59.65+00
c7asu4eg819ghzovt0btf2vv2gues91s	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1pPdSF:xyl1SgnLo9q03U8AN7Ilih8Le25VH-L1w7VmFqHyDWU	2023-02-22 05:57:15.769+00
dyt51mg5t0c8olxnxn58w3zcsaxyfufm	.eJxVjL0KwjAYRd8ls5T8NH-Ojg46KDiGL8kXY4UWkpYi4rvbQgcd7znc8yYOpjG7qWJxj0j2hJHdL_MQntivoo4FZo-lvFzsoL8PrpvHZvO1OV7Opxv667DMw3b6K2Woeckk6iVNnFsZLUMTAzdBC2-oQjQiSJuMFoorARp4qxUNYsWppUy00Ury-QJYMDrE:1oyALr:SbdRrM7_OtHK3ERkv2QD9MqzUCjQnVXCqRHr1LQcJ7U	2022-12-08 11:25:07.943+00
ekp1ob6kaw4koepl9k9y4bwyszxvhjp7	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1oyAUD:1lNb7LeZ_HNZa50vZ9ilCORE_ot65orERyq-uTh-rxo	2022-12-08 11:33:45.183+00
f1xshjtupo5d1ovjn8kssqwaktagm6jz	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1pQjK2:cuJ92TU0u4MI6mTvsMRvKgN0kJWZKCrYL2N-yTbOxxM	2023-02-25 06:25:18.363+00
fg5k7il2l2qrq35qhnhwqysm7ia4f59b	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1pTaIq:aACc_7zt0cFsdVLfiOwbTaC5DdBu2E_f3-qpO0rF0j8	2023-03-05 03:23:52.892+00
ivosrhah21b1vou5txkw6fzr731x8tfa	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1pSWR5:lRsCJD7JUyz2SO-V5w4qcss-hwFXDqfEqzf6QU6vfec	2023-03-02 05:03:59.6+00
lk8hia5no0vx0i7g6ekavovcz8jk9sis	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1oyB7b:OymzEnn3QpFIruGLah16wgeKQhhC2lrFnsKhNiz7UnU	2022-12-08 12:14:27.997+00
lnp9ng53fv8enw1yesclgypzkw754e89	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1pLK2t:rtiKq6OWvxIhcrYkmWc4f6iTP3p-pkIYpDa8M17Hbys	2023-02-10 08:25:15.523+00
mr3fe6nq8is2iwxti4zra3q5mtlzjj0v	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1pPd77:sVqNOdzFQFbvE9R9pkMwmpeeC4idbiVBh2VhrkHQ5Bg	2023-02-22 05:35:25.469+00
n1igvc8jnlmaosxv7g6b9801aufyzpz9	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1pPd1W:PzPKIQBdV4fFpbfiH8N6MlkG6xKi0a9ZkQ13OfKb9BI	2023-02-22 05:29:38.325+00
nrxwqwf0vu5xc29q0egiz3rlh59yz6ab	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1pSsRL:C8CFXDGavW43h62r2Cj4r1OevWE9QWEoXn-TLoUs1KA	2023-03-03 04:33:43.783+00
oe9siuurp5bnxmfzu1762rvcrqa7nhm6	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1oyCSD:q2VamQq2HCefjOYEQhFg1xpvEzmfS_SArSJOXWmkQ4s	2022-12-08 13:39:49.664+00
otcnm3j07ukqqyjc01kz3xpmm99858oz	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1pPfy8:tKpzfnynR_koNGte3n-4oIHqLzFGSlwDIDujWhO9njA	2023-02-22 08:38:20.834+00
qihjmg5fibjlt7lp063pioi6mfvfrpni	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1oyDiF:ZtsvDLWVChKIMujkmltVi2bd4-nCrCGagiT8NeQhh4g	2022-12-08 15:00:27.589+00
ryaiwv7jnrij7y0jat226h3llinhool0	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1pPlyr:5kFx71AtP8Pt48-pGOQeLWnw5sVUoBhQTXLcSND9g0U	2023-02-22 15:03:29.601+00
s4atet515xlrfanhcy21ycy398736yl3	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1pPJf9:6duOK92xMnOSzLv9tenAM3COX-y02bgQY7MSubxdtao	2023-02-21 08:49:15.581+00
sesgn983burk3bvweajq9d52ylf8i8ma	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1pHOF8:dvSZU3xJhPRDaxV9-WT6rtzkETbtmfzM5c5oReWKyQA	2023-01-30 12:05:38.343+00
sz7a28ezqbz8dwjn9inxd8p1fuopqqw8	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1oyDLG:38fY6HpOypdz4Asb3NylHGBbu19tNbJWufsord6YbfY	2022-12-08 14:36:42.721+00
uyrqnbxk4kzow9gctkmb0g6weso4yp8c	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1pRQwU:WpNn5oNLT3WfEjpxBbwxnhcbkAElPPA2L_gAe5mj24c	2023-02-27 04:59:54.449+00
v7hqgh7yqb08zntc77tfke6sw5j8tjbc	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1oyAPW:9f2sq7qLFJYRvTCp90qYZhu3C8EQIT13AAsumMJBtC4	2022-12-08 11:28:54.009+00
xf8973r4qo28zwk36urnge2gkeein1u0	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1pLJ7B:iN6mVNCftQF24ZDHpd9rTFQ7R42nZY6hDaXkFq8cE28	2023-02-10 07:25:37.596+00
xz6t9rzinuolnq9z21q7qp8hg72j940b	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1oyAZi:xWKf4MYQ8DoyTeP6dHPpyA6nXHJzg2mrkI9RbbvE71M	2022-12-08 11:39:26.403+00
z3t50qz7pepi4vcgh2q48km8lht78zci	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1pPd8i:T0iCH2IM_Is-QuTwfOKgwRVC6FXzRO5hesd2KZ3GFXY	2023-02-22 05:37:04.513+00
zt6xkl0erbhtumjify9gu9qjnz2f8y30	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1pQhdT:i1LUVmeEcGLyHSLETVdMPO2ATgWTWjh4RVENuJZWnWI	2023-02-25 04:37:15.341+00
e4u718q8dnhiv7aju7lorvzgkpx9rbsc	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1pVs2n:DIOweXkI-5P9owH0qEmxWcclL-eWIgxxguNgMCio4oY	2023-03-11 10:44:45.552497+00
lex8hsf4izwnhfspde9foj46ux23uadg	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1pW8HL:trqYqwO-qQle2JN6EmaDwtsy5ZbJ2YJWD9yOMODB3uM	2023-03-12 04:04:51.327193+00
tl7bugspq5qk7a7d6hvb9x8dbolojbbj	.eJxVjLsOAiEUBf-F2hDeD0t7v4FcuCCrBpJltzL-u5Jsoe3MnPMiAfathn3kNSxIzoST0y-LkB65TYF3aLdOU2_bukQ6E3rYQa8d8_NytH8HFUb9rguLmhUhvEbPs8MkXLIyOmZydjJpX5yVRhgJFoSyhiU5cVGMS4Vek_cH0jg28w:1pWCiS:xA-KTmwtgQt1Ghgh2x4c8fS0fKIa_PrgRwRaD8Ll0fo	2023-03-12 08:49:08.453168+00
\.


--
-- Data for Name: questions_bloomstaxonomylevel; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.questions_bloomstaxonomylevel (id, name, description) FROM stdin;
1	K1	Remembering
2	K2	Understanding
3	K3	Applying
4	K4	Analysing
5	K5	Evaluating
6	K6	Creating
\.


--
-- Data for Name: questions_course; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.questions_course (id, semester, active, department_id, regulation_id) FROM stdin;
1	3	t	1	2
2	3	t	2	2
\.


--
-- Data for Name: questions_createsyllabus; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.questions_createsyllabus (id, created_at, updated_at, is_completed, faculty_id) FROM stdin;
2	2023-02-25 10:54:56.948237+00	2023-02-25 10:54:56.948253+00	f	3
4	2023-02-25 15:30:01.926911+00	2023-02-25 15:30:01.92694+00	f	3
1	2023-02-25 10:52:53.244355+00	2023-02-26 04:24:01.377158+00	t	1
6	2023-02-26 04:56:28.500738+00	2023-02-26 04:56:28.500761+00	f	1
\.


--
-- Data for Name: questions_createsyllabus_syllabus; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.questions_createsyllabus_syllabus (id, createsyllabus_id, syllabus_id) FROM stdin;
11	1	143
12	1	144
13	1	145
14	1	146
15	1	147
\.


--
-- Data for Name: questions_degree; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.questions_degree (id, name, full_form) FROM stdin;
1	BE	Bachelor of Engineering
2	BTECH	Bachelor of Technology
\.


--
-- Data for Name: questions_department; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.questions_department (id, branch, branch_code, degree_id, hod_id, programme_id) FROM stdin;
1	Computer Science Engineering	CSE	1	1	1
2	Information Technology	IT	2	\N	1
\.


--
-- Data for Name: questions_facultieshandling; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.questions_facultieshandling (id, course_id, subject_id) FROM stdin;
1	1	1
2	1	2
3	2	1
4	2	4
\.


--
-- Data for Name: questions_facultieshandling_faculties; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.questions_facultieshandling_faculties (id, facultieshandling_id, user_id) FROM stdin;
34	3	3
35	4	4
36	4	5
40	1	1
41	1	3
44	2	1
\.


--
-- Data for Name: questions_image; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.questions_image (id, uploaded_at, photo) FROM stdin;
1	2023-02-07 08:53:13.532+00	questions/Screenshot_2023-01-17_151438.png
2	2023-02-11 06:45:42.001+00	questions/012edbbc-788d-43d0-b7c8-2a3357e1f6fb_yosemite-lowpoly.jpg
3	2023-02-11 06:45:55.082+00	questions/2e928634-27b1-4948-b826-edf0b9798ff6_manj.js
4	2023-02-11 06:50:38.167+00	questions/9ffd56c0-aa83-4d39-bcf0-0bf7be9d88cf_main.js
5	2023-02-11 06:51:55.382+00	questions/e6bcc3b4-4fd4-4bae-8f35-87a9d0205575_manj.js
6	2023-02-11 06:52:09.241+00	questions/f63db083-cbf6-483e-9556-f6b868659ca6_Screenshot_2023-01-17_151438.png
7	2023-02-11 06:53:11.758+00	questions/5a39cf29-61af-47ea-bca4-a40ccf499972_main.js
8	2023-02-11 06:54:00.681+00	questions/205a9e76-bd02-46c4-a639-9a11732e1231_cpp.cpp
9	2023-02-11 06:55:01.637+00	questions/ac4f79fb-a168-4b0e-8bc4-38358a86a96e_avl.c
10	2023-02-11 06:55:23.353+00	questions/f288e4b5-e239-4fee-b6eb-73672e52c58b_avl.c
11	2023-02-11 06:56:05.178+00	questions/65264399-48d0-4224-a0da-82df91e76018_avl.c
12	2023-02-11 06:56:11.338+00	questions/f58c6241-6fea-4825-9f52-1d46c9e52841_avl.c
13	2023-02-11 06:58:01.967+00	questions/d8ec298c-27e3-4ee9-b491-d5236a5c0161_avl.c
\.


--
-- Data for Name: questions_lesson; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.questions_lesson (id, name, subject_id, objective, outcome) FROM stdin;
1	Lists	1	To understand the basics of algorithmic notion	To understand the basics of algorithmic notion.
2	Stacks and Queues	1	To understand and apply the algorithm analysis techniques.	To critically analyze the efficiency of alternative algorithmic solutions for the same.
3	Trees	1	To understand the limitations of Algorithmic power.	To understand the limitations of Algorithmic power.
4	Graphs	1	To critically analyze the efficiency of alternative algorithmic solutions for the same.	To critically analyze the efficiency of alternative algorithmic solutions for the same.
5	Sorting, Searching and Hash Techniques	1	To understand different algorithm design techniques.	To understand different algorithm design techniques.
6	Computational Thinking and Problem Solving	2	Course Objective	Course Outcome
7	Data Types, Expressions, Statement	2	Course Objective	Course Outcome
8	Control Flow, Functions, Strings	2	Course Objective	Course Outcome
9	List, Tuple, Dictionary	2	Course Objective	Course Outcome
10	Files, Modules, Package	2	Course Objective	Course Outcome
11	hello	3	ss	ss
13	My Lesson	2	Objective	OUTCome
14	My Lessons	2	Objective	OUTCome
15	My Lessonss	2	Objective	OUTCome
16	Iron 1	4	Objective	Outcome
17	Lesson 2	4	Objective 2	Outcome 2
\.


--
-- Data for Name: questions_lesson_outcome_btl; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.questions_lesson_outcome_btl (id, lesson_id, bloomstaxonomylevel_id) FROM stdin;
1	13	1
2	13	2
3	13	6
4	14	1
5	14	2
6	14	6
7	15	1
8	15	2
9	15	6
10	16	3
11	16	4
12	17	2
13	17	6
\.


--
-- Data for Name: questions_markrange; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.questions_markrange (id, start, "end") FROM stdin;
1	2	2
2	3	4
3	5	7
4	8	9
5	10	11
6	12	13
7	14	14
8	15	16
\.


--
-- Data for Name: questions_previousyearsqp; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.questions_previousyearsqp (id, month, year) FROM stdin;
1	A/M	2016
2	N/D	2016
3	A/M	2017
4	N/D	2017
5	A/M	2018
6	N/D	2018
7	A/M	2019
8	N/D	2019
9	A/M	2020
10	N/D	2020
11	A/M	2021
12	N/D	2021
\.


--
-- Data for Name: questions_programme; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.questions_programme (id, name) FROM stdin;
1	UG
2	PG
\.


--
-- Data for Name: questions_question; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.questions_question (id, created_at, updated_at, question, answer, start_mark, end_mark, difficulty, btl_id, created_by_id, lesson_id, mark_id, priority, scenario_based) FROM stdin;
1	2022-11-24 11:30:51.814+00	2022-11-24 11:30:51.814+00	Define ADT. Give any two examples.		2	2	E	1	1	1	1	0	f
2	2022-11-24 11:50:15.143+00	2022-11-24 11:50:15.143+00	Distinguish between linear and non linear data structures.		2	2	E	2	1	1	1	0	f
3	2022-11-24 11:55:14.796+00	2022-11-24 11:55:14.796+00	Compare calloc() and realloc() function and mention its application in linked list.		2	2	E	4	1	1	1	0	f
4	2022-11-24 11:56:01.422+00	2022-11-24 11:56:01.422+00	Describe the differences between singly and doubly linked lists.		2	2	E	1	1	1	1	0	f
5	2022-11-24 11:56:53.979+00	2022-11-24 11:56:53.979+00	List out the areas in which data structures are applied extensively.		2	2	E	1	1	1	1	0	f
6	2022-11-24 11:57:54.276+00	2022-11-24 11:57:54.276+00	Define non linear data structure.		2	2	E	1	1	1	1	0	f
7	2022-11-24 11:59:02.321+00	2022-11-24 11:59:02.321+00	Compare singly linked list with circular linked list.		2	2	E	5	1	1	1	0	f
8	2022-11-24 11:59:53.534+00	2022-11-24 11:59:53.534+00	What are the types of linked list?		2	2	E	1	1	1	1	0	f
9	2022-11-24 12:02:40.944+00	2022-11-24 12:02:40.944+00	List out the advantage of circular linked list.		2	2	M	1	1	1	1	0	f
10	2022-11-24 12:06:06.834+00	2022-11-24 12:06:06.834+00	Binary search cannot be performed on a linked list. Examine.		3	4	M	3	1	1	2	0	f
11	2022-11-24 12:06:56.724+00	2022-11-24 12:06:56.724+00	Discuss the advantages and disadvantages of linked lists and arrays.		2	2	E	2	1	1	1	0	f
12	2022-11-24 12:07:57.654+00	2022-11-24 12:07:57.654+00	Give an example for linked list application.		2	2	E	2	1	1	1	0	f
13	2022-11-24 12:09:52.138+00	2022-11-24 12:09:52.138+00	Specify the use of Header node in a linked list.		2	2	E	6	1	1	1	0	f
14	2022-11-24 12:10:27.878+00	2022-11-24 12:10:27.878+00	Illustrate the use of linked list with an example.		2	2	E	3	1	1	1	0	f
15	2022-11-24 12:11:09.862+00	2022-11-24 12:11:09.862+00	Show the ways in which list ADT can be implemented.		2	2	E	3	1	1	1	0	f
16	2022-11-24 12:11:59.757+00	2022-11-24 12:11:59.757+00	Differentiate arrays and linked lists.		2	2	E	2	1	1	1	0	f
17	2022-11-24 12:12:53.855+00	2022-11-24 12:12:53.855+00	Analyze and write a find routine in array implementation.		2	2	M	4	1	1	1	0	f
18	2022-11-24 12:14:11.072+00	2022-11-24 12:14:11.072+00	Analyze and write the array representation of a polynomial: p(x) = 4x3+6x2+7x+9		2	2	M	4	1	1	1	0	f
19	2022-11-24 12:16:43.45+00	2022-11-24 12:16:43.45+00	Should arrays or linked lists be used for the following types of applications? Support your justification.\r\n1.\tMany search operations in sorted list.\r\n2.\tMany search operations in Unsorted list.		2	2	M	5	1	1	1	0	f
20	2022-11-24 12:17:25.165+00	2022-11-24 12:17:25.165+00	Develop an algorithm for insertion operation in a singly linked list.		2	2	M	6	1	1	1	0	f
21	2022-11-24 12:20:01.182+00	2022-11-24 12:20:01.182+00	Describe the Applications of lists.		5	7	M	1	1	1	3	0	f
22	2022-11-24 12:20:58.075+00	2022-11-24 12:20:58.075+00	Describe the \tPolynomial manipulation.		8	9	M	1	1	1	4	0	f
23	2022-11-24 12:22:13.382+00	2022-11-24 12:22:13.382+00	What is a linked list?		2	2	E	1	1	1	1	0	f
24	2022-11-24 12:22:42.626+00	2022-11-24 12:22:42.626+00	Describe the suitable routine segments for any four operations.		10	11	M	1	1	1	5	0	f
25	2022-11-24 12:25:38.092+00	2022-11-24 12:25:38.092+00	List an algorithm to perform the following operations in a doubly linked list. \r\n  i.Insert a node at the end of the list.		5	7	M	1	1	1	3	0	f
26	2022-11-24 12:26:25.596+00	2022-11-24 12:26:25.596+00	List an algorithm to perform the following operations in a doubly linked list.\r\n      i.Delete the last node in the list.		5	7	M	1	1	1	3	0	f
27	2022-11-24 12:27:14.801+00	2022-11-24 12:27:14.801+00	Discuss the insertion and deletion procedures for cursor based linked lists.		5	7	M	2	1	1	3	0	f
28	2022-11-24 12:27:55.139+00	2022-11-24 12:27:55.139+00	Give an algorithm for the deletion and reverse operations on doubly linked list.		5	7	M	2	1	1	3	0	f
29	2022-11-24 12:28:39.286+00	2022-11-24 12:28:39.286+00	Give the algorithm to perform insertion on a doubly linked list.		5	7	M	2	1	1	3	0	f
30	2022-11-24 12:29:08.047+00	2022-11-24 12:29:08.047+00	Give the algorithm to perform deletion on a doubly linked list.		5	7	M	2	1	1	3	0	f
31	2022-11-24 12:30:32.63+00	2022-11-24 12:30:32.63+00	Write an algorithm to demonstrate a polynomial using a linked list for Addition and Subtraction.		5	7	M	4	1	1	3	0	f
32	2022-11-24 12:31:25.716+00	2022-11-24 12:31:25.716+00	Write an algorithm to demonstrate a polynomial using a linked list for Multiplication operations.		5	7	M	4	1	1	3	0	f
33	2022-11-24 12:32:50.679+00	2022-11-24 12:32:50.679+00	Analyze and write algorithm for Circular Linked list for the following operations using structure pointer.\r\ni.\tCreate & Insert .		5	7	M	4	1	1	3	0	f
34	2022-11-24 12:33:41.046+00	2022-11-24 12:33:41.046+00	Analyze and write algorithm for Circular Linked list for the following operations using structure pointer.\r\n i. Delete & Display.		5	7	M	4	1	1	3	0	f
35	2022-11-24 12:35:56.932+00	2022-11-24 12:35:56.933+00	Explain the application of linked list in detail.\r\ni. Radix sort.		5	7	M	3	1	1	3	0	f
36	2022-11-24 12:36:38.397+00	2022-11-24 12:36:38.397+00	Explain the application of linked list in detail.\r\ni.  Multi list.		5	7	M	3	1	1	3	0	f
38	2022-11-24 12:38:53.089+00	2022-11-24 12:38:53.089+00	Develop a program to add the values of the nodes of a linked list and then calculate the mean.		12	13	M	6	1	1	6	0	f
39	2022-11-24 12:39:20.275+00	2022-11-24 12:39:20.275+00	Describe the various operations of the list ADT with examples.		12	13	M	1	1	1	6	0	f
40	2022-11-24 12:40:17.339+00	2022-11-24 12:40:17.339+00	Illustrate how polynomial manipulations are performed using lists? Explain any two operations with example.		12	13	M	4	1	1	6	0	f
41	2022-11-24 12:41:24.31+00	2022-11-24 12:41:24.31+00	Explain the steps involved in the following insertion operations in a singly linked list.\r\ni. Insert the node in the start and End.		5	7	M	3	1	1	3	0	f
42	2022-11-24 12:42:05.845+00	2022-11-24 12:42:05.845+00	Explain the steps involved in the following insertion operations in a singly linked list.\r\n ii. Insert the node in the middle of the List.		5	7	M	3	1	1	3	0	f
43	2022-11-24 12:42:46.165+00	2022-11-24 12:42:46.165+00	Dicuss an algorithm for linked list implementation of list.		12	13	M	2	1	1	6	0	f
44	2022-11-24 12:43:25.036+00	2022-11-24 12:43:25.036+00	Create an algorithm to add two polynomials using linked list.		15	16	M	6	1	1	8	0	f
95	2022-11-24 13:16:43.561+00	2022-11-24 13:16:43.561+00	Point out the advantages of using quick sort.		2	2	M	4	1	5	1	0	f
45	2022-11-24 12:44:04.058+00	2022-11-24 12:44:04.058+00	Explain an algorithm to split a linked list into two sub lists containing odd and even ordered elements in them respectively.		15	16	M	5	1	1	8	0	f
46	2022-11-24 12:45:11.25+00	2022-11-24 12:45:11.25+00	Explain an algorithm to merge two sorted linked lists into a single sorted list.		15	16	M	5	1	1	8	0	f
47	2022-11-24 12:46:17.039+00	2022-11-24 12:46:17.039+00	Design algorithm for various operations performed on circular linked list.\r\nExtend the algorithm defined in the previous question for the doubly linked circular list.		15	16	H	6	1	1	8	0	f
48	2022-11-24 12:48:05.223+00	2022-11-24 12:48:05.223+00	Point out the advantage of representing stack using a linked list than array.		2	2	E	4	1	2	1	0	f
49	2022-11-24 12:48:38.439+00	2022-11-24 12:48:38.439+00	Point out the rules followed during the infix to postfix conversions.		2	2	E	4	1	2	1	0	f
50	2022-11-24 12:49:08.088+00	2022-11-24 12:49:08.088+00	Compare the working of stack and queue data structure.		2	2	E	5	1	2	1	0	f
51	2022-11-24 12:49:36.035+00	2022-11-24 12:49:36.035+00	Develop an algorithm for inserting a new element into the stack.		2	2	E	6	1	2	1	0	f
52	2022-11-24 12:50:05.43+00	2022-11-24 12:50:05.43+00	Define stack and queue.		2	2	E	1	1	2	1	0	f
53	2022-11-24 12:50:52.444+00	2022-11-24 12:50:52.444+00	List any four applications of stack.		2	2	E	1	1	2	1	0	f
54	2022-11-24 12:52:01.859+00	2022-11-24 12:52:01.859+00	Given the prefix for an expression. Write its postfix:		2	2	E	2	1	2	1	0	f
55	2022-11-24 12:53:12.859+00	2022-11-24 12:53:12.859+00	Describe how the following "infix" expression is evaluated with the help of		2	2	E	2	1	2	1	0	f
56	2022-11-24 12:54:05.766+00	2022-11-24 12:54:05.766+00	Give the postfix and prefix forms of the expression:		2	2	E	2	1	2	1	0	f
57	2022-11-24 12:54:38.697+00	2022-11-24 12:54:38.697+00	Define double ended queue.		2	2	E	1	1	2	1	0	f
58	2022-11-24 12:55:26.101+00	2022-11-24 12:55:26.101+00	List the applications of a queue.		2	2	E	1	1	2	1	0	f
59	2022-11-24 12:56:19.131+00	2022-11-24 12:56:19.131+00	What are the applications of priority queue?		2	2	M	1	1	2	1	0	f
60	2022-11-24 12:56:44.433+00	2022-11-24 12:56:44.433+00	What is circular queue?		2	2	E	1	1	2	1	0	f
61	2022-11-24 12:57:11.431+00	2022-11-24 12:57:11.431+00	Circular queue is better than standard linear queue, Why?		2	2	M	2	1	2	1	0	f
62	2022-11-24 12:57:35.641+00	2022-11-24 12:57:35.641+00	Classify the different types of queues.		2	2	E	3	1	2	1	0	f
63	2022-11-24 12:58:21.196+00	2022-11-24 12:58:21.196+00	Illustrate the difference between a queues and linked lists with an example.		2	2	E	3	1	2	1	0	f
64	2022-11-24 12:58:49.083+00	2022-11-24 12:58:49.083+00	Complete a routine to display the contents of queue.		2	2	M	3	1	2	1	0	f
65	2022-11-24 12:59:02.2+00	2022-11-24 12:59:02.2+00	What is hashing?		2	2	E	1	1	5	1	0	f
66	2022-11-24 12:59:16.989+00	2022-11-24 12:59:16.989+00	Analyze and write a routine to check whether the queue is full or empty.		2	2	E	4	1	2	1	0	f
67	2022-11-24 13:00:12.575+00	2022-11-24 13:00:12.575+00	For railway reservation the queue data structure is preferred –Justify.		2	2	M	5	1	2	1	0	f
68	2022-11-24 13:00:51.38+00	2022-11-24 13:00:51.38+00	Develop an algorithm for deleting an element in a double ended queue.		2	2	M	6	1	2	1	0	f
69	2022-11-24 13:00:59.939+00	2022-11-24 13:00:59.939+00	Describe how the divide and conquer technique is implemented in binary search.		12	13	M	1	1	5	6	0	f
70	2022-11-24 13:01:19.379+00	2022-11-24 13:01:19.379+00	Describe with an example how to evaluate arithmetic expressions using stacks.		12	13	M	1	1	2	6	0	f
71	2022-11-24 13:01:35.865+00	2022-11-24 13:01:35.865+00	Describe the algorithm to sort the following array: 77, 33, 44, 11, 88, 22, 66,\r\n55 (Insertion sort)		5	7	H	1	1	5	3	0	f
72	2022-11-24 13:01:55.026+00	2022-11-24 13:02:12.644+00	Describe the algorithm to sort the following array: 77, 33, 44, 11, 88, 22, 66,\r\n55 (Shell Sort)		5	7	M	1	1	5	3	0	f
73	2022-11-24 13:01:58.272+00	2022-11-24 13:01:58.272+00	Explain array based implementation of stacks.		5	7	M	3	1	2	3	0	f
74	2022-11-24 13:02:26.172+00	2022-11-24 13:02:26.172+00	Explain linked list implementation of stacks.		5	7	M	3	1	2	3	0	f
75	2022-11-24 13:03:02.687+00	2022-11-24 13:03:02.687+00	Describe about stack ADT in detail.		5	7	E	1	1	2	3	0	f
76	2022-11-24 13:03:41.081+00	2022-11-24 13:03:41.081+00	Explain any one application of stack.		5	7	E	1	1	2	3	0	f
77	2022-11-24 13:04:51.29+00	2022-11-24 13:04:51.29+00	Explain the following expressions with an example. \r\n  i.Prefix and infix		5	7	E	3	1	2	3	0	f
78	2022-11-24 13:05:34.722+00	2022-11-24 13:05:34.722+00	Explain the following expressions with an example.\r\n i.Postfix.		5	7	E	3	1	2	3	0	f
79	2022-11-24 13:06:15.932+00	2022-11-24 13:06:15.932+00	Write an algorithm to convert an infix expression to a postfix expression. Trace the algorithm to convert the infix expression ‘(a+b)*c/d+e/f” to a postfix expression.		8	9	M	5	1	2	4	0	f
80	2022-11-24 13:06:59.437+00	2022-11-24 13:06:59.437+00	Justify the need for Infix and Postfix expression.		5	7	M	5	1	2	3	0	f
81	2022-11-24 13:07:55.136+00	2022-11-24 13:07:55.136+00	Give an algorithm for push and pop operations on stack using a linked list.		5	7	E	2	1	2	3	0	f
82	2022-11-24 13:09:20.288+00	2022-11-24 13:09:20.288+00	Define extendible hashing.		2	2	E	1	1	5	1	0	f
83	2022-11-24 13:10:02.389+00	2022-11-24 13:10:02.389+00	Give the fastest searching algorithm.		2	2	E	1	1	5	1	0	f
84	2022-11-24 13:10:39.27+00	2022-11-24 13:10:39.27+00	What is meant by internal and external sorting? Give any two examples for each type.		2	2	E	1	1	5	1	0	f
85	2022-11-24 13:11:17.051+00	2022-11-24 13:11:17.051+00	Describe the complexity of bubble sort.		2	2	E	1	1	5	1	0	f
86	2022-11-24 13:11:52.009+00	2022-11-24 13:11:52.009+00	Name the applications of linear and binary search techniques.		2	2	E	1	1	5	1	0	f
87	2022-11-24 13:12:19.066+00	2022-11-24 13:12:19.066+00	Give the time complexities of bubble sort and quick sort.		2	2	M	2	1	5	1	0	f
88	2022-11-24 13:12:45.071+00	2022-11-24 13:12:45.071+00	Predict the fastest sorting algorithm, justify.		2	2	M	2	1	5	1	0	f
89	2022-11-24 13:13:45.484+00	2022-11-24 13:13:45.484+00	Compare internal and external sorting.		2	2	H	4	1	5	1	0	f
90	2022-11-24 13:14:12.863+00	2022-11-24 13:14:12.863+00	Distinguish between linear and binary search technique.		2	2	M	2	1	5	1	0	f
91	2022-11-24 13:14:57.745+00	2022-11-24 13:14:57.745+00	Classify the different sorting methods.		2	2	M	3	1	5	1	0	f
92	2022-11-24 13:15:26.199+00	2022-11-24 13:15:26.199+00	Develop an algorithm for a quick sort.		2	2	M	6	1	5	1	0	f
93	2022-11-24 13:15:56.992+00	2022-11-24 13:15:56.992+00	Which hashing technique is best and illustrate with an example?		2	2	M	3	1	5	1	0	f
94	2022-11-24 13:16:22.541+00	2022-11-24 13:16:22.541+00	Summarize the open addressing hashing method with an example.		2	2	M	5	1	5	1	0	f
96	2022-11-24 13:17:17.702+00	2022-11-24 13:17:17.702+00	Compare the working of linear and binary search techniques.		2	2	M	4	1	5	1	0	f
97	2022-11-24 13:17:48.773+00	2022-11-24 13:17:48.773+00	Select the best sorting method out of the following - insertion sort, quick sort and merge sort and give justification.		2	2	M	5	1	5	1	0	f
98	2022-11-24 13:17:49.206+00	2022-11-24 13:17:49.206+00	Describe the process of postfix expression evaluation with an example.		5	7	M	2	1	2	3	0	f
99	2022-11-24 13:18:07.541+00	2022-11-24 13:18:07.541+00	Illustrate the time complexity of insertion sort with an example.		2	2	M	3	1	5	1	0	f
100	2022-11-24 13:18:27.634+00	2022-11-24 13:18:27.634+00	Describe the process of conversion from infix expression to postfix expression using stack.		5	7	M	2	1	2	3	0	f
101	2022-11-24 13:18:30.969+00	2022-11-24 13:18:30.969+00	Identify the advantage of shell sort over insertion sort.		2	2	M	1	1	5	1	0	f
102	2022-11-24 13:18:55.365+00	2022-11-24 13:18:55.365+00	What is a graph and its types?		2	2	M	1	1	4	1	0	f
103	2022-11-24 13:18:56.106+00	2022-11-24 13:18:56.106+00	Develop a simple algorithm for a linear search.		2	2	M	6	1	5	1	0	f
104	2022-11-24 13:19:14.735+00	2022-11-24 13:19:14.735+00	Write an algorithm that checks if expression is correctly parenthesized using stack and illustrate with an example.		5	7	M	4	1	2	3	0	f
105	2022-11-24 13:20:03.687+00	2022-11-24 13:20:03.687+00	Write the function to examine whether the stack is full() or empty().		5	7	M	4	1	2	3	0	f
106	2022-11-24 13:20:59.065+00	2022-11-24 13:20:59.065+00	Create a complete undirected graph having five nodes		2	2	E	6	1	4	1	0	f
107	2022-11-24 13:21:12.004+00	2022-11-24 13:21:12.004+00	Describe about queue ADT in detail.		5	7	E	1	1	2	3	0	f
108	2022-11-24 13:21:21.732+00	2022-11-24 13:21:21.732+00	When do you say a graph is bi-connected?		2	2	E	1	1	4	1	0	f
109	2022-11-24 13:21:30.929+00	2022-11-24 13:21:30.929+00	List the different types of hashing techniques?		5	7	M	1	1	5	3	0	f
110	2022-11-24 13:21:36.045+00	2022-11-24 13:21:36.045+00	Explain any one application of queue with suitable example.		5	7	M	1	1	2	3	0	f
111	2022-11-24 13:21:40.174+00	2022-11-24 13:21:40.174+00	Give the purpose of Dijikstra’s algorithm.		2	2	M	2	1	4	1	0	f
112	2022-11-24 13:21:59.3+00	2022-11-24 13:21:59.3+00	Explain them in detail with an Example.		5	7	M	1	1	5	3	0	f
113	2022-11-24 13:22:00.529+00	2022-11-24 13:22:00.53+00	Differentiate cyclic and acyclic graph		2	2	M	4	1	4	1	0	f
114	2022-11-24 13:22:00.837+00	2022-11-24 13:22:00.837+00	Briefly describe the operations of queue with examples.		12	13	M	1	1	2	6	0	f
115	2022-11-24 13:22:17.359+00	2022-11-24 13:22:17.359+00	Classify strongly connected and weakly connected graph.		2	2	E	4	1	4	1	0	f
116	2022-11-24 13:22:30.525+00	2022-11-24 13:22:30.525+00	Analyze and write an algorithm to implement queue functions using arrays.		12	13	M	4	1	2	6	0	f
117	2022-11-24 13:22:33.12+00	2022-11-24 13:22:33.12+00	How to find all articulation points in a given graph?		2	2	E	3	1	4	1	0	f
118	2022-11-24 13:22:33.474+00	2022-11-24 13:22:33.474+00	Interpret the result of inserting the keys 2, 3, 5, 7, 11, 13, 15, 6, 4 into an initially empty extendible hashing data structure with M = 3.		5	7	M	2	1	5	3	0	f
119	2022-11-24 13:22:45.479+00	2022-11-24 13:22:45.479+00	Define the length of the graph.		2	2	M	1	1	4	1	0	f
120	2022-11-24 13:22:55.509+00	2022-11-24 13:22:55.51+00	Develop an algorithm to perform the four operations in a double ended queue\r\nthat is implemented as an array.		12	13	M	6	1	2	6	0	f
121	2022-11-24 13:22:58.825+00	2022-11-24 13:22:58.825+00	Define minimum spanning tree. Give an example		2	2	E	2	1	4	1	0	f
122	2022-11-24 13:23:03.301+00	2022-11-24 13:23:03.301+00	Discuss the running time of Divide-and-Conquer Merge sort algorithm.		5	7	M	2	1	5	3	0	f
123	2022-11-24 13:23:22.004+00	2022-11-24 13:23:22.004+00	State the principle of Topological sorting.		2	2	M	1	1	4	1	0	f
124	2022-11-24 13:23:24.204+00	2022-11-24 13:23:24.204+00	Discuss circular queue and its implementation.		12	13	M	2	1	2	6	0	f
125	2022-11-24 13:23:35.063+00	2022-11-24 13:23:35.063+00	Explain procedure for Depth first search algorithm.		2	2	H	4	1	4	1	0	f
126	2022-11-24 13:23:36.763+00	2022-11-24 13:23:36.763+00	Sort the sequence 3, 1, 4, 1, 5, 9, 2, 6, 5 using Insertion sort.		5	7	M	2	1	5	3	0	f
127	2022-11-24 13:23:50.801+00	2022-11-24 13:23:50.801+00	Analyze Bi-connectivity.		2	2	E	4	1	4	1	0	f
128	2022-11-24 13:23:54.257+00	2022-11-24 13:23:54.257+00	Illustrate the enqueue and dequeue operations on double ended queues.		12	13	M	4	1	2	6	0	f
129	2022-11-24 13:24:01.515+00	2022-11-24 13:24:01.515+00	Describe the routine for insertion sort.		5	7	M	2	1	5	3	0	f
130	2022-11-24 13:24:30.902+00	2022-11-24 13:24:30.902+00	Prove that the number of edges in a complete graph of n vertices in n(n-1)/2		2	2	E	5	1	4	1	0	f
131	2022-11-24 13:24:37.911+00	2022-11-24 13:24:37.911+00	Develop and Show the simulation using stack for the following expression : 12 + 3 * 14 – (5 * 16) + 7 .		15	16	M	6	1	2	8	0	f
132	2022-11-24 13:24:49.998+00	2022-11-24 13:24:49.998+00	Write an algorithm to sort a set of ‘N’ numbers using quick sort. Demonstrate the algorithm for the following set of numbers: 88,11,22,44,66,99,32,67,54,10.		12	13	M	3	1	5	6	0	f
133	2022-11-24 13:25:21.089+00	2022-11-24 13:25:21.089+00	Explain the various collision resolution techniques in detail with an example		12	13	M	4	1	5	6	0	f
134	2022-11-24 13:25:22.162+00	2022-11-24 13:25:22.162+00	Explain an algorithm to implement the circular queue using arrays.  List the applications of Queues.		15	16	H	5	1	2	8	0	f
135	2022-11-24 13:26:04.951+00	2022-11-24 13:26:04.951+00	Assess the difference between double ended queue and circular queue.\r\nShow the simulation using stack for the following expression to convert infix to postpix : p * q = (r-s / t).		15	16	H	5	1	2	8	0	f
136	2022-11-24 13:26:08.818+00	2022-11-24 13:26:30.825+00	In a complete graph with n vertices, show that the number of spanning trees is at least 2^n-1 - 1		2	2	M	5	1	4	1	0	f
137	2022-11-24 13:26:10.391+00	2022-11-24 13:26:10.391+00	Compare the below different Sorting methods and discuss about each method in a very detailed Manner.\r\ni.Bucket Sort.		5	7	M	4	1	5	3	0	f
138	2022-11-24 13:26:49.793+00	2023-02-17 05:13:23.998+00	(Update) Develop an algorithm to explain Priority Queue, deQueue and the applications of queues.\n\n$$\n\\begin{vmatrix} a & b \\\\ c & d\\end{vmatrix}\n\n$$	\n	2	2	E	6	1	2	1	0	f
139	2022-11-24 13:26:56.335+00	2022-11-24 13:26:56.335+00	Compare the below different Sorting methods and discuss about each method in a very detailed Manner.\r\nii.Selection Sort		5	7	M	4	1	5	3	0	f
140	2022-11-24 13:27:14.47+00	2022-11-24 13:27:14.47+00	What are Euler circuits?		2	2	M	4	1	4	1	0	f
141	2022-11-24 13:27:31.173+00	2022-11-24 13:27:31.173+00	Sort the given integers and Explain the intermediate results using shell sort: 35,12,14,9,15,45,32,95,40,5.		5	7	M	5	1	5	3	0	f
142	2022-11-24 13:28:01.879+00	2022-11-24 13:28:01.879+00	Write and Explain a C code to sort an integer array.		5	7	M	5	1	5	3	0	f
143	2022-11-24 13:28:17.996+00	2022-11-24 13:28:17.996+00	Give two applications of graphs.		2	2	E	2	1	4	1	0	f
144	2022-11-24 13:28:28.103+00	2022-11-24 13:28:28.103+00	Create a algorithm to perform a binary Search.		5	7	H	6	1	5	3	0	f
145	2022-11-24 13:28:31.928+00	2022-11-24 13:28:31.928+00	What is residual graph?		2	2	E	1	1	4	1	0	f
146	2022-11-24 13:28:52.362+00	2022-11-24 13:28:52.362+00	Develop an algorithm for Merge sort with an example.		5	7	H	6	1	5	3	0	f
147	2022-11-24 13:29:37.493+00	2022-11-24 13:29:37.493+00	Write short notes on Bubble Sort.		5	7	M	3	1	5	3	0	f
148	2022-11-24 13:30:02.531+00	2022-11-24 13:30:02.531+00	Illustrate an algorithm to sort the elements using bubble sort.		8	9	M	3	1	5	4	0	f
149	2022-11-24 13:30:09.63+00	2022-11-24 13:30:09.63+00	Describe in detail about the following representations of a graph.\r\ni. Adjacency Matrix		5	7	M	1	1	4	3	0	f
150	2022-11-24 13:30:38.086+00	2022-11-24 13:30:38.086+00	Describe the following collision resolution techniques in detail with an example.\r\ni.Separate chaining.		5	7	E	1	1	5	3	0	f
151	2022-11-24 13:30:43.804+00	2022-11-24 13:30:43.804+00	Describe in detail about the following representations of a graph.\r\ni. Adjacency List		5	7	M	1	1	4	3	0	f
152	2022-11-24 13:31:09.702+00	2022-11-24 13:31:09.702+00	Describe the following collision resolution techniques in detail with an example.\r\nii.Rehashing.		5	7	E	1	1	5	3	0	f
153	2022-11-24 13:31:13.039+00	2022-11-24 13:31:13.039+00	Explain the topological sorting of a graph G with example.		5	7	E	1	1	4	3	0	f
154	2022-11-24 13:31:33.11+00	2022-11-24 13:31:33.11+00	Quote the step wise procedure for topological sort		5	7	M	1	1	4	3	0	f
155	2022-11-24 13:31:47.515+00	2022-11-24 13:31:47.515+00	Differentiate depth-first search and breadth-first search traversal of a graph with suitable examples.		12	13	M	4	1	4	6	0	f
156	2022-11-24 13:31:50.256+00	2022-11-24 13:31:50.256+00	Explain different hashing technique.		5	7	M	4	1	5	3	0	f
157	2022-11-24 13:32:12.835+00	2022-11-24 13:32:12.835+00	Explain the rehashing technique with suitable example.		8	9	M	4	1	5	4	0	f
158	2022-11-24 13:32:34.75+00	2022-11-24 13:32:34.75+00	Describe the open addressing and chaining methods of collusion resolution techniques in hashing.		12	13	M	2	1	5	6	0	f
159	2022-11-24 13:33:04.908+00	2022-11-24 13:33:04.908+00	Develop an algorithm to search a number in a given set of numbers using binary search. Develop and algorithm to explain Extendible Hashing.		15	16	M	6	1	5	8	0	f
160	2022-11-24 13:33:33.78+00	2022-11-24 17:59:24.331+00	Explain a C code to sort an integer array using Selection Sort and Radix Sort.		15	16	M	5	1	5	8	0	f
161	2022-11-24 13:33:44.483+00	2022-11-24 13:33:44.483+00	Explain with algorithm, How DFS be performed on a undirected graph.		5	7	M	4	1	4	3	0	f
162	2022-11-24 13:34:00.38+00	2022-11-24 13:34:00.381+00	Show the algorithm for finding connected components of an undirected\r\ngraph using DFS, and derive the time complexity of the algorithm.		5	7	H	4	1	4	3	0	f
163	2022-11-24 13:34:07.983+00	2022-11-24 13:34:07.983+00	Explain an algorithm for Shell Sort and Merge Sort and explain with example.		15	16	M	5	1	5	8	0	f
164	2022-11-24 13:34:18.404+00	2022-11-24 13:34:18.404+00	Discuss an algorithm for Breadth first Search on a graph.		5	7	M	2	1	4	3	0	f
165	2022-11-24 13:34:37.019+00	2022-11-24 13:34:37.019+00	Give an example based on the algorithm.		5	7	M	2	1	4	3	0	f
166	2022-11-24 13:35:02.759+00	2022-11-24 13:35:02.759+00	Prepare a quick sort algorithm and explain with suitable example Give its worst case, average case and best case time complexities.		15	16	H	6	1	5	8	0	f
167	2022-11-24 13:36:19.566+00	2022-11-24 13:36:24.051+00	If the depth of the binary tree is k, the maximum number of nodes in the\r\nbinary tree is 2k-1.Justify		2	2	H	5	1	3	1	0	f
168	2022-11-24 13:37:10.895+00	2022-11-24 13:37:10.895+00	Define a fully binary tree.Give an example.		2	2	E	1	1	3	1	0	f
169	2022-11-24 13:44:27.566+00	2022-11-24 13:44:32.678+00	Create an expression tree for the expression.a*(b+c)+((d+e*f)*g)		2	2	M	6	1	3	1	0	f
170	2022-11-24 13:45:37.507+00	2022-11-24 13:45:37.507+00	Illustrate Kruskal’s algorithm to find the minimum spanning tree of a graph.		5	7	E	3	1	4	3	0	f
171	2022-11-24 13:45:44.276+00	2022-11-24 13:45:44.277+00	How does the AVL tree differ from binary search tree?		2	2	M	4	1	3	1	0	f
172	2022-11-24 13:45:57.548+00	2022-11-24 13:45:57.548+00	Compare any two applications of Graph with your own example		12	13	E	5	1	4	6	0	f
173	2022-11-24 13:46:27.47+00	2022-11-24 13:46:27.47+00	Describe any one of the shortest path algorithms with suitable example		12	13	M	1	1	4	6	0	f
174	2022-11-24 13:46:39.392+00	2022-11-24 13:46:39.392+00	What are the various rotations in AVL trees?		2	2	E	1	1	3	1	0	f
175	2022-11-24 13:46:49.234+00	2022-11-24 13:46:49.234+00	Discuss the prims algorithm for minmum spanning tree.Give an example.		12	13	M	2	1	4	6	0	f
176	2022-11-24 13:47:33.324+00	2022-11-24 13:47:33.324+00	List the applications of trees.		2	2	M	1	1	3	1	0	f
177	2022-11-24 13:47:33.63+00	2022-11-24 13:47:33.63+00	Develop an algorithm to compute the shortest path using Dijkstra’s algorithm. Validate the algorithm with suitable example.		12	13	E	6	1	4	6	0	f
178	2022-11-24 13:47:57.421+00	2022-11-24 13:47:57.421+00	Explain the depth first approach of finding articulation points in a connected graph with necessary algorithm.		12	13	M	4	1	4	6	0	f
179	2022-11-24 13:48:35.509+00	2022-11-24 13:48:35.509+00	Write short notes on Bi-connectivity.		5	7	E	2	1	4	3	0	f
180	2022-11-24 13:48:54.234+00	2022-11-24 13:48:54.234+00	Express different types of graphs with example.		5	7	H	2	1	4	3	0	f
181	2022-11-24 13:49:21.962+00	2023-01-27 08:22:46.246+00	Given the adjacency matrix of a graph, write a program to calculate the in- degree and the out-degree of a node N in the graph.	\n	15	16	H	4	1	4	8	0	f
182	2022-11-24 13:49:23.307+00	2022-11-24 13:49:23.307+00	What are threaded binary trees? Give its advantages		2	2	M	2	1	3	1	0	f
183	2022-11-24 13:49:42.86+00	2022-11-24 13:49:42.86+00	How can we efficiently check whether or not a graph is disconnected?		5	7	H	5	1	4	3	0	f
184	2022-11-24 13:49:56.769+00	2022-11-24 13:49:56.769+00	Describe an algorithm that uses a brute force approach to find all the articulation points in G in O(V (V + E)) time.		8	9	M	5	1	4	4	0	f
185	2022-11-24 13:50:16.023+00	2023-01-27 07:06:13.596+00	Given a rooted tree, one desires to find the shortest path from the root to a given node v. Which algorithm would one use to find this shortest path.	\n	5	7	E	6	1	4	3	0	f
186	2022-11-24 13:50:26.532+00	2022-11-24 14:06:13.529+00	Define balance factor of AVL Tree.		2	2	M	1	1	3	1	0	f
187	2022-11-24 13:50:38.015+00	2022-11-24 13:50:38.015+00	Write a program to determine whether there is at least one path from the source to the destination.		8	9	M	6	1	4	4	0	f
188	2022-11-24 13:50:53.253+00	2022-11-24 13:50:53.253+00	How do we calculate the balance factor for each node in a AVL tree?		2	2	M	2	1	3	1	0	f
189	2022-11-24 13:51:31.565+00	2022-11-24 13:51:31.565+00	Simulate the result of inserting 3,1,4,6,2,8,9 into an initially empty AVL Tree.		2	2	M	6	1	3	1	0	f
190	2022-11-24 13:52:06.431+00	2022-11-24 14:05:52.06+00	Give an example for expression tree.		2	2	E	2	1	3	1	0	f
191	2022-11-24 13:52:38.951+00	2022-11-24 13:52:38.951+00	Number the following binary tree to traverse it in i.Preorder\r\nii.Inorder		2	2	E	2	1	3	1	0	f
192	2022-11-24 13:53:20.513+00	2022-11-24 13:53:20.513+00	Explain why binary search cannot be performed on a linked list.		2	2	E	4	1	3	1	0	f
193	2022-11-24 13:54:20.207+00	2022-11-24 13:54:20.207+00	How do you calculate the depth of a B-Tree?		2	2	M	3	1	3	1	0	f
194	2022-11-24 13:55:01.568+00	2022-11-24 13:55:01.568+00	List out the various operations that can be performed on B-trees		2	2	M	1	1	3	1	0	f
195	2022-11-24 13:55:32.456+00	2022-11-24 13:55:32.456+00	List out the properties of B+ -Trees		2	2	M	1	1	3	1	0	f
196	2022-11-24 13:56:02.081+00	2022-11-24 13:56:02.081+00	Illustrate the steps in the construction of a heap of records with the following key values:12,33,67,8,7,80,5,23		2	2	M	3	1	3	1	0	f
197	2022-11-24 13:56:38.529+00	2022-11-24 13:56:38.529+00	Analyze the properties of binary heap.		2	2	M	4	1	3	1	0	f
198	2022-11-24 13:57:30.229+00	2022-11-24 13:57:30.229+00	Define a heap and show how it can be used to represent a priority queue		2	2	M	3	1	3	1	0	f
199	2022-11-24 13:59:29.036+00	2022-11-24 13:59:29.036+00	Write an algorithm for preorder, inorder and postorder traversal of a binary tree.		12	13	M	1	1	3	6	0	f
200	2022-11-24 14:00:27.502+00	2022-11-24 14:00:27.502+00	Explain the following operations on a binary search tree with suitable algorithms\r\ni.\tFind a node		5	7	M	4	1	3	3	0	f
201	2022-11-24 14:01:25.234+00	2022-11-24 14:01:25.234+00	Explain the following operations on a binary search tree with suitable algorithms\r\n\r\ni.\tFind the minimum and maximum elements of binary search tree		5	7	M	4	1	3	3	0	f
202	2022-11-24 14:01:56.883+00	2022-11-24 14:05:33.715+00	Write short notes on threaded binary tree		5	7	M	1	1	3	3	0	f
203	2022-11-24 14:02:39.2+00	2022-11-24 14:02:39.2+00	Describe an iterative algorithm to traverse a tree in preorder		5	7	M	1	1	3	3	0	f
204	2022-11-24 14:03:16.561+00	2022-11-24 14:03:16.561+00	Write an algorithm for inserting and deleting a node in a binary search tree.		12	13	M	1	1	3	6	0	f
205	2022-11-24 14:03:56.803+00	2022-11-24 14:03:56.803+00	Discuss in detail the various methods in which a binary tree can be represented. Discuss the advantage and disadvantage of each method		12	13	E	2	1	3	6	0	f
206	2022-11-24 14:05:56.907+00	2022-11-24 14:05:56.907+00	Explain the B+ tree and its properties with an Example		5	7	M	5	1	3	3	0	f
207	2022-11-24 14:07:10.033+00	2022-11-24 14:07:10.033+00	What are the steps to convert general tree to binary tree?		5	7	E	5	1	3	3	0	f
208	2022-11-24 14:07:48.538+00	2022-11-24 14:13:49.448+00	Construct B Tree to insert the following key elements(order of the tree is 3) 5,2,13,3,45,72,4,6,9,22		5	7	M	6	1	3	3	0	f
209	2022-11-24 14:09:20.34+00	2022-11-24 14:13:59.117+00	Draw a B Tree of order 6		5	7	M	6	1	3	3	0	f
210	2022-11-24 14:10:09.74+00	2022-11-24 14:10:09.74+00	Discuss how to insert an element in a AVL tree, Explain with algorithm.		5	7	M	2	1	3	3	0	f
211	2022-11-24 14:10:47.728+00	2022-11-24 14:10:47.728+00	Explain how deletion can take place in AVL trees with suitable algorithms		5	7	M	2	1	3	3	0	f
212	2022-11-24 14:11:23.979+00	2022-11-24 14:14:11.194+00	What are AVL trees? Describe the different rotations defined for AVL tree.		5	7	E	1	1	3	3	0	f
213	2022-11-24 14:12:28.086+00	2022-11-24 14:14:18.585+00	Insert the following elements step by step in sequence into an empty AVL\r\ntree 15,18,20,21,28,2330,26		5	7	M	1	1	3	3	0	f
214	2022-11-24 14:13:41.415+00	2022-11-24 14:13:41.415+00	Point out the operations of B-tree using 2-3 tree.		5	7	H	4	1	3	3	0	f
215	2022-11-24 14:14:23.402+00	2022-11-24 14:14:23.402+00	Explain the operations of threaded binary tree.		5	7	M	4	1	3	3	0	f
216	2022-11-24 14:15:29.215+00	2022-11-24 14:15:29.215+00	Discuss the different traversal technique in binary tree with suitable algorithms and examples?		12	13	M	2	1	3	6	0	f
217	2022-11-24 14:16:13.772+00	2022-11-24 14:16:13.772+00	Explain the construction of expression tree with example.		5	7	E	4	1	3	3	0	f
218	2022-11-24 14:17:00.065+00	2022-11-24 14:17:00.065+00	Give the applications of trees		5	7	M	6	1	3	3	0	f
219	2022-11-24 14:17:30.787+00	2022-11-24 14:18:32.847+00	Show the result of inserting 15,17,6,19,11,10,13,20,8,14,12 one at a time into an initially empty binary min heap.		5	7	E	3	1	3	3	0	f
220	2022-11-24 14:18:12.57+00	2022-11-24 14:18:41.046+00	Show the result of performing three delete min operations in the final binary min heap obtained		5	7	M	3	1	3	3	0	f
221	2022-11-24 14:19:58.452+00	2022-11-24 14:19:58.452+00	Illustrate How delete operation performed on binary heap?		5	7	M	3	1	3	3	0	f
222	2022-11-24 14:20:43.8+00	2022-11-24 14:20:55.401+00	Write a suitable operations for procolate up and percolate down operations in a binary heap		5	7	E	3	1	3	3	0	f
223	2022-11-24 14:21:41.679+00	2022-11-24 14:21:41.679+00	Compare B trees with B+ trees.		5	7	M	6	1	3	3	0	f
224	2022-11-24 14:22:26.182+00	2022-11-24 14:22:26.182+00	Create a B+ tree of order 5 for the following data arriving in sequence:\r\n90, 27, 7, 9, 18, 21, 3, 4, 16, 11, 21, 72		8	9	E	6	1	3	4	0	f
225	2022-11-24 14:23:58.578+00	2022-11-24 14:23:58.578+00	Draw B – Tree pf order m = 5 for the keys\r\n{K, O,S,V,MF,B,G,T,U,W}		5	7	E	5	1	3	3	0	f
226	2022-11-24 14:25:05.38+00	2022-11-24 14:31:10.041+00	1)Draw B – Tree pf order m = 5 for the keys\r\n{K, O,S,V,MF,B,G,T,U,W}\r\n2)Delete the keys K and G in order.		10	11	E	5	1	3	5	0	f
227	2022-11-24 14:25:59.935+00	2022-11-24 14:32:17.389+00	i.\tDraw B – Tree pf order m = 5 for the keys\r\n{K, O,S,V,MF,B,G,T,U,W}\t\r\nii.\tDelete the keys K and G in order. \r\niii.\tJustify the number of splits needed for inserts / delete with proper reasons.		15	16	M	5	1	3	8	0	f
37	2022-11-24 12:37:47.642+00	2023-02-26 08:30:58.913332+00	Consider an array A[1: n] Given a position, write an algorithm to insert an element in the Array. If the position is empty, the element is inserted easily. If the position is already occupied the element should be inserted with the minimum number of shifts. (Note: The elements can shift to the left or to the right to make the minimum number of moves).	\n	2	2	H	5	1	1	1	2	t
\.


--
-- Data for Name: questions_question_previous_years; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.questions_question_previous_years (id, question_id, previousyearsqp_id) FROM stdin;
1	138	8
2	138	1
3	138	4
4	160	1
5	160	4
6	160	6
7	181	5
8	185	8
9	185	9
34	37	9
\.


--
-- Data for Name: questions_question_topics; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.questions_question_topics (id, question_id, topic_id) FROM stdin;
1	138	12
2	185	1
34	37	5
\.


--
-- Data for Name: questions_regulation; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.questions_regulation (id, year) FROM stdin;
1	2017
2	2021
\.


--
-- Data for Name: questions_subject; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.questions_subject (id, code, subject_name, co) FROM stdin;
1	CS3351	Data Structures	IDK
2	CS2105	Problem Solving using Python	CO
3	TONY	Avengers	IRON
5	sdfss	dfsdf	sdf
6	sdfsd	fsdfsd	sdff
7	s	s	s
8	ss	ss	ss
9	sss	sss	sss
10	a	a	a
11	b	b	b
12	bs	b	b
4	sdfs	dfsdf	sdf
\.


--
-- Data for Name: questions_syllabus; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.questions_syllabus (id, unit, course_id, lesson_id) FROM stdin;
1	1	1	1
2	2	1	2
3	3	1	4
4	4	1	5
5	5	1	3
6	1	1	6
7	2	1	7
8	3	1	8
9	4	1	9
10	5	1	10
143	1	2	5
144	2	2	2
145	3	2	3
146	4	2	4
147	5	2	1
116	4	2	11
124	4	2	14
\.


--
-- Data for Name: questions_topic; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.questions_topic (id, name, lesson_id, active, priority) FROM stdin;
1	inactive	4	t	f
2	queue	2	t	f
3	Data Structure	2	t	f
4	algorithm	2	t	f
5	Algorithm	1	t	f
6	DSA	1	t	f
7	New topic	1	t	f
8	asdfsdf	1	t	f
9	VDS	1	t	f
10	MUI	1	t	f
11	Sort	5	t	f
12	Prioriy Queue	2	t	f
\.


--
-- Data for Name: refresh_token_refreshtoken; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.refresh_token_refreshtoken (id, token, created, revoked, user_id) FROM stdin;
1	2781c6cd9d7a51629d4a746cbbed4d5028af02fa	2022-11-24 13:51:29.06+00	\N	1
2	03735fd4fe4b83a4831e359375f5598b52f1fb9a	2022-11-24 14:35:07.321+00	\N	1
3	4327763758722018ad14ce780c47009af6367656	2023-01-16 12:05:15.246+00	\N	1
4	eca05d926aa6b80768d0b5a86658271ad64be3ff	2023-01-27 07:05:13.134+00	\N	1
5	b7d05955728ffa49d1bd7a8a386cb8839d4da864	2023-01-27 07:23:01.439+00	\N	1
6	c1c1b72bfd317459cf144b64806575a6725915c3	2023-01-27 08:07:54.364+00	\N	1
7	2469d0acc15bc92334ad6a8fe81574ce30d8aaf0	2023-01-27 08:08:09.33+00	\N	1
9	d7ef28ec6e46499b7e6f265eedb26bb27788f56e	2023-01-27 09:10:47.911+00	\N	1
10	c3385b9bf23281660f05e7ba6369015d286a2b36	2023-01-27 09:35:08.872+00	\N	1
11	388e1a99cf6ed55652c26d15928f06e1e195186c	2023-01-27 09:36:13.395+00	\N	1
12	852f6f9a376815281e18b6459e7d215075391d0c	2023-01-27 09:37:20.576+00	\N	1
13	1ccd8e2090e1b26f58541fc4e8cb05b23c23a6cf	2023-01-27 09:37:50.601+00	\N	1
14	691e22ddf4d3e5d55f0595ee6a512984e6818b0b	2023-01-27 09:42:20.033+00	\N	3
15	2dc059ec802a56aca601e6a06a8c45cce4c875f6	2023-02-04 05:18:53.562+00	\N	1
48	fd1eb1c96df7fa16c28a3bfd181617e5732f6954	2023-02-07 05:07:43.122+00	\N	1
81	5a3420654ee1904f0157ba95ca1a8a9acc3871cb	2023-02-07 08:48:47.578+00	\N	1
82	ba6a55d37c1a3baff962b5f6173eeabb489a0f7f	2023-02-07 08:49:36.219+00	\N	1
83	f4d53b0fb7436f63adbc9162d467a75442a8c776	2023-02-07 09:52:09.955+00	\N	1
84	a768ba0702962141f2ac9aa09283068d5d17c621	2023-02-08 05:46:37.339+00	\N	1
85	1aa76374a48e9447bb3f6db1b4c92e4e3c223e43	2023-02-08 07:44:16.936+00	\N	1
86	c694476ff1af90455aa7b32e80db1d4efb7c2011	2023-02-08 07:59:13.765+00	\N	1
87	7ca66a522b438c26f500dc78c00bd0b65b2c8b2e	2023-02-09 13:22:53.294+00	\N	1
88	4cc18888910ad5c095f1041aa675d2c591bb6c7d	2023-02-09 13:23:51.679+00	\N	1
89	dcb0cd7703be3dee18bbda17dc82b7125daa8593	2023-02-09 13:25:55.047+00	\N	1
90	12c143019ae2e1ed576b390d2f55938d7df15249	2023-02-09 13:26:35.284+00	\N	1
91	7be9f96bd50817dbd421efb7045800630e30bd77	2023-02-09 13:27:20.824+00	\N	1
92	e1442a31f5d40a3341d43ad610364bc3ff458693	2023-02-09 13:27:34.612+00	\N	1
93	327ff6a347c529ff9be627500368df886768c9a6	2023-02-09 13:30:04.763+00	\N	1
124	15252667542ac114fe1d2849937501f8f6fd3628	2023-02-09 13:30:59.691+00	\N	1
157	fb5a9e3c9827736eaaf5f8292ea2cdf7df3a5320	2023-02-09 13:35:27.459+00	\N	1
158	bf436f5e9c5ae00c0d8e6f3b84419c4ae35e4d80	2023-02-09 13:36:36.903+00	\N	1
159	eafe7a9371dbdd860d84926217666674025def95	2023-02-09 13:37:25.505+00	\N	1
190	33230c0bc8d8e30b02c7d7fedb3c6322f981fc92	2023-02-09 13:39:45.154+00	\N	1
191	d23636c58d4602c219dfe61537c3984b142e9a03	2023-02-09 13:59:56.661+00	\N	1
192	c0573af560b24b4b1c9eb93414f959c6560e41d1	2023-02-09 14:07:25.948+00	\N	1
193	3f31e185f7290f1d83f3bbfa12d3640cc0fd9c91	2023-02-09 14:22:59.983+00	\N	1
194	3e4f6ca2ee8659cd2061fa974924511545803ad7	2023-02-09 14:23:09.402+00	\N	1
195	41e31825c41d385713f666e25fbaa20225dd3a8e	2023-02-09 14:29:42.176+00	\N	1
196	1fdb4583b61fbc4d08e8e4038c3b1c422a175e3a	2023-02-09 14:53:46.152+00	\N	1
197	89ad339d7fb5a8f674bde0feda4708026673c048	2023-02-09 14:53:47.993+00	\N	1
198	a0bba2785908e50eb435a67d33c4ab23f5a6cc2c	2023-02-09 14:54:22.48+00	\N	1
199	968bd6356bce8be4bd99566d026ca96279b6609e	2023-02-09 14:54:26.899+00	\N	1
200	8095c84c24d0f8f9d3ff364fc272d2d1f6533898	2023-02-09 14:55:13.531+00	\N	1
201	856a598593abecae5fa9dafe2d15c99d08ab7578	2023-02-09 14:55:16.52+00	\N	1
202	1d25f0c9d80c6f07438384e530ad1f7f4b506288	2023-02-09 15:02:05.681+00	\N	1
203	75241b47263bf2deb48753660f50360423807df0	2023-02-09 15:18:17.146+00	\N	1
204	3007f47f5c2d1fb92b6ef89db696c7485993347e	2023-02-09 15:18:34.517+00	\N	1
205	b56b8af55391cee8087ac25f042e9c4d326bbae6	2023-02-09 15:18:43.028+00	\N	1
206	e4ebab130d0740d48a69f7e9eef4fe4e2d46821f	2023-02-09 15:19:29.225+00	\N	1
207	007c882a576332223fb3fdb359f953761f8af910	2023-02-09 15:22:07.25+00	\N	1
208	471bb5110e2c161f1cba4557150195322dbb1707	2023-02-09 15:22:10.321+00	\N	1
209	e04a7e0dea86e97ff27ad514d9006574ddef6238	2023-02-09 15:30:07.843+00	\N	1
210	6afdd8549ef1a5f45f381b86b3b01be17f3c71a4	2023-02-09 15:31:09.271+00	\N	1
211	3f75481796952109cd166c029484925b0aae95f5	2023-02-09 15:32:39.959+00	\N	1
212	a277d421e535271fe50b79988b729c90b2fe90a3	2023-02-09 15:35:23.636+00	\N	1
213	565b5ea62f78a5417de9a61271d2fd993d419242	2023-02-09 15:35:41.348+00	\N	1
214	ec69ecddcc17394f4de33d35573d0ddaa66219c3	2023-02-09 15:36:47.922+00	\N	1
215	ee60632310f25ef1c2052322a57e796113ec3cb9	2023-02-09 15:37:00.427+00	\N	1
216	d42f7826507da74bc86286c8b4141ec4ece6a076	2023-02-09 15:37:08.556+00	\N	1
217	9a18903f0732fb533b5f194818f3cfb6ec440f44	2023-02-09 15:38:21.028+00	\N	1
218	3b263d9cffe45c1dc1541df0d8713aed6703c61d	2023-02-09 15:38:29.609+00	\N	1
219	b7b7345552bacde67ce7778885a5682ec1b64a13	2023-02-09 15:38:40.426+00	\N	1
220	6593859f1ebdc92073d7c160352afd59d1db4196	2023-02-09 16:35:00.52+00	\N	1
221	03eb4d0a5d780ec8471c0314de5666e97e692fe7	2023-02-09 16:35:42.856+00	\N	1
222	880362d1086888aa5a0cb9826108354f47e2b627	2023-02-09 16:36:13.748+00	\N	3
223	cdfeb4e8ce8ddad9bbeae6544ff381ff7cbb5a69	2023-02-09 16:38:19.613+00	\N	1
224	0a144d976424e726cf7b7ae5f9281d4fa49e0c96	2023-02-11 04:08:24.647+00	\N	1
225	21d4758c244928c89431d67aae9d9aea96aac850	2023-02-11 04:35:07.055+00	\N	1
226	8501947439102f356af9f608082c88691369a8d3	2023-02-11 04:35:37.789+00	\N	1
227	78e512a1f58d4860d09a5bb1208d0afc802b8078	2023-02-11 06:24:29.848+00	\N	1
228	8d73199e4c46be15350bcb1a15f3e39783362a29	2023-02-13 04:32:36.174+00	\N	1
229	f0a1ab10d93940627b470d4e863eea0e06fdb9b2	2023-02-13 04:32:38.049+00	\N	1
261	b87ed07ec2d97ac19deb2581cae578b247af07e0	2023-02-13 08:51:29.124+00	\N	1
262	b6218b61021ec5c40d3d4a29c11eb72f47765ad5	2023-02-16 05:44:10.831+00	\N	1
263	bf4a1b598578660101814e06a0c8402352c84b28	2023-02-17 04:29:18.259+00	\N	1
264	07478fc1f44431d8fcbbc5f28bd2e0693a0e7eda	2023-02-17 05:01:59.547+00	\N	1
265	8b84c10fa82b1bc351fc4d8b3b819f7a9be5b46e	2023-02-18 04:53:30.929+00	\N	1
266	d830a11e9acf60c934219130b80b81819f069266	2023-02-18 05:00:14.696+00	\N	1
267	27d94f7dbd018504ca103185f349ce56e42f0aaa	2023-02-18 05:10:59.466+00	\N	1
268	0cde6a8b860c15188769cb339d7c462f8df3f349	2023-02-18 08:44:02.473+00	\N	1
269	a70b0fd8845a181d3477841bc022356ab904c527	2023-02-18 13:43:28.533+00	\N	1
270	80da37c846c99024dca91a01287537e1eef5c310	2023-02-18 14:20:33.646+00	\N	1
271	a00d83b9f1e48dc768c61af89ff054e723b20a08	2023-02-18 14:21:41.752+00	\N	1
272	849182d62260540f9baf146600033aeae896f267	2023-02-18 14:23:49.724+00	\N	1
273	1f051ace97c56408f5cf718e9d6255e495b147ef	2023-02-18 14:23:54.054+00	\N	1
274	aaed1ea5de4284a6c86b10e27ac3336c45dc298a	2023-02-18 14:26:44.381+00	\N	1
275	ab8e710c82bbe09407482d9aa316434a21109d41	2023-02-18 14:26:44.857+00	\N	1
276	552fab2e7a4df74254a7f69d1981e5cb2c11c342	2023-02-18 14:26:45.003+00	\N	1
277	971b51fc54164452dbab1e66d7177dc78357b4af	2023-02-18 14:26:45.276+00	\N	1
278	553b2b599a04bc6b84e2a152a1f0d4d066965dda	2023-02-18 14:26:45.465+00	\N	1
279	9f43e23d8b3eeca8ef99e5152bf4bc1df582273c	2023-02-18 14:26:45.596+00	\N	1
280	42eaff98b86ca8d6fa8f15ee5b43daa3c98c567c	2023-02-18 14:26:45.778+00	\N	1
281	3399cc5fb6d8d8f06c183a109eb993d0c826d0dc	2023-02-18 14:26:45.978+00	\N	1
282	dc02dee90a6df7a0a4b0619808527b07cc5e1661	2023-02-18 14:36:16.552+00	\N	1
283	1e2cff61a92b5755fe636a66d0e580ba5c7b0a6a	2023-02-18 14:37:01.068+00	\N	1
284	5925d3dde7d07876611936039657ea4342a6923e	2023-02-18 14:38:14.863+00	\N	1
285	c7bb70c03293bb8a30b2a4d6c5a438d33bf43b19	2023-02-18 14:49:59.721+00	\N	1
286	44a0bc5552cd1e00fca21ec2e3fef00a266a6c82	2023-02-18 15:39:16.12+00	\N	1
287	b59dec5fff120bb9e20f40140dca130532019b71	2023-02-18 15:40:28.135+00	\N	1
288	b159af7e517724a3743c475d5e585708da5dc1be	2023-02-18 15:49:08.043+00	\N	1
289	411baa6b4e576f898baf7e214154b7e33d6f2e11	2023-02-18 15:55:01.692+00	\N	1
290	bffe11bdc2894b7619a366c87900fa312d8f8507	2023-02-19 03:23:24.182+00	\N	1
291	0dddc423a1177331f7e6e5700c6ef8781cb26d22	2023-02-19 04:52:03.427+00	\N	1
292	26a5e05e2d483b1fb626fb960bc45e938e2615cc	2023-02-19 05:03:34.685+00	\N	1
293	a075e300f295abc5e5d0a6c4eb099210a1a13c7f	2023-02-19 05:03:42.697+00	\N	1
294	715b449702a2dc6a1d2b3f6a5f008128e0f62d9b	2023-02-19 05:04:05.298+00	\N	1
295	500267fd94ab104ccc53d436a1c314584ce97dfe	2023-02-19 05:05:12.748+00	\N	1
296	577687a50015ce7bbc6aefa856869ab62bbc37df	2023-02-25 17:29:22.921156+00	\N	1
297	a04ebeda31aa0ca506549bac60b9649faf295dbd	2023-02-26 06:22:58.711556+00	\N	4
298	877e349a5795780a92bfc8bd01552f0d1fdbcc05	2023-02-26 06:23:08.450256+00	\N	1
299	4df36d7ff62e843f6fd6c430ace70a26180812b8	2023-02-26 07:05:49.190871+00	\N	4
300	1d6fb04df7fb27cdd8e233fcec361ae651eacaa8	2023-02-26 07:09:51.239668+00	\N	1
301	cb3cef22edd7f64ca1cb9267aa808bd81cbda2e6	2023-02-26 08:32:09.850259+00	\N	13
\.


--
-- Data for Name: users_newuser; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.users_newuser (id, created_at, updated_at, first_name, last_name, email, password, email_verified, email_secret, approved) FROM stdin;
\.


--
-- Data for Name: users_user; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.users_user (id, password, last_login, is_superuser, first_name, last_name, is_staff, is_active, date_joined, email) FROM stdin;
3	pbkdf2_sha256$390000$8cbl6Sd2tDuF8p1rLw14vc$pVdTmsbTQcxtKwHprbjfcklYsSUCoWuzW4in/1/GcjM=	\N	f			f	t	2023-01-27 09:41:59.196+00	test@qpgen.com
4	pbkdf2_sha256$390000$4PmFe3Jk252JAXhpyZcbpP$xZ2Yjh0R9779He5DHcZqTcO+3StXJuBeTXxz2jZSQHY=	\N	f	Samar	Virk	f	t	2023-02-26 05:07:25.46413+00	samarvirk29@testcitchennai.net
5	pbkdf2_sha256$390000$4PmFe3Jk252JAXhpyZcbpP$xZ2Yjh0R9779He5DHcZqTcO+3StXJuBeTXxz2jZSQHY=	\N	f	Diya	Rajagopal	f	t	2023-02-26 05:07:25.469794+00	diyarajagopal96@testcitchennai.net
6	pbkdf2_sha256$390000$4PmFe3Jk252JAXhpyZcbpP$xZ2Yjh0R9779He5DHcZqTcO+3StXJuBeTXxz2jZSQHY=	\N	f	Zaina	Koshy	f	t	2023-02-26 05:07:25.474742+00	zainakoshy95@testcitchennai.net
7	pbkdf2_sha256$390000$4PmFe3Jk252JAXhpyZcbpP$xZ2Yjh0R9779He5DHcZqTcO+3StXJuBeTXxz2jZSQHY=	\N	f	Tarini	Vala	f	t	2023-02-26 05:07:25.480673+00	tarinivala76@testcitchennai.net
8	pbkdf2_sha256$390000$4PmFe3Jk252JAXhpyZcbpP$xZ2Yjh0R9779He5DHcZqTcO+3StXJuBeTXxz2jZSQHY=	\N	f	Misha	Batta	f	t	2023-02-26 05:07:25.484304+00	mishabatta75@testcitchennai.net
9	pbkdf2_sha256$390000$4PmFe3Jk252JAXhpyZcbpP$xZ2Yjh0R9779He5DHcZqTcO+3StXJuBeTXxz2jZSQHY=	\N	f	Manikya	Karpe	f	t	2023-02-26 05:07:25.48613+00	manikyakarpe79@testcitchennai.net
10	pbkdf2_sha256$390000$4PmFe3Jk252JAXhpyZcbpP$xZ2Yjh0R9779He5DHcZqTcO+3StXJuBeTXxz2jZSQHY=	\N	f	Lakshit	Hegde	f	t	2023-02-26 05:07:25.487892+00	lakshithegde41@testcitchennai.net
11	pbkdf2_sha256$390000$4PmFe3Jk252JAXhpyZcbpP$xZ2Yjh0R9779He5DHcZqTcO+3StXJuBeTXxz2jZSQHY=	\N	f	Ivana	Borde	f	t	2023-02-26 05:07:25.489275+00	ivanaborde49@testcitchennai.net
12	pbkdf2_sha256$390000$4PmFe3Jk252JAXhpyZcbpP$xZ2Yjh0R9779He5DHcZqTcO+3StXJuBeTXxz2jZSQHY=	\N	f	Taran	Viswanathan	f	t	2023-02-26 05:07:25.491063+00	taranviswanathan74@testcitchennai.net
13	pbkdf2_sha256$390000$4PmFe3Jk252JAXhpyZcbpP$xZ2Yjh0R9779He5DHcZqTcO+3StXJuBeTXxz2jZSQHY=	\N	f	Dhanus	SL	f	t	2023-02-26 05:07:25+00	dhanus@citchennai.net
1	pbkdf2_sha256$390000$79vby5iGcwABaLH3crFDnT$vixpwSxGZfZ6Yl/OaIB52Jeq5swiPlbrRa1iqeASXrU=	2023-02-26 08:49:08.409313+00	t			t	t	2022-11-24 11:22:15.261+00	admin@admin.com
\.


--
-- Data for Name: users_user_groups; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.users_user_groups (id, user_id, group_id) FROM stdin;
\.


--
-- Data for Name: users_user_user_permissions; Type: TABLE DATA; Schema: public; Owner: admin
--

COPY public.users_user_user_permissions (id, user_id, permission_id) FROM stdin;
\.


--
-- Name: auth_group_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.auth_group_id_seq', 1, false);


--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.auth_group_permissions_id_seq', 1, false);


--
-- Name: auth_permission_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.auth_permission_id_seq', 100, true);


--
-- Name: coe_coe_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.coe_coe_id_seq', 3, true);


--
-- Name: django_admin_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.django_admin_log_id_seq', 425, true);


--
-- Name: django_content_type_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.django_content_type_id_seq', 25, true);


--
-- Name: django_migrations_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.django_migrations_id_seq', 84, true);


--
-- Name: questions_bloomstaxonomylevel_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.questions_bloomstaxonomylevel_id_seq', 6, true);


--
-- Name: questions_course_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.questions_course_id_seq', 2, true);


--
-- Name: questions_createsyllabus_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.questions_createsyllabus_id_seq', 6, true);


--
-- Name: questions_createsyllabus_syllabus_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.questions_createsyllabus_syllabus_id_seq', 15, true);


--
-- Name: questions_degree_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.questions_degree_id_seq', 2, true);


--
-- Name: questions_department_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.questions_department_id_seq', 2, true);


--
-- Name: questions_facultieshandling_faculties_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.questions_facultieshandling_faculties_id_seq', 50, true);


--
-- Name: questions_facultieshandling_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.questions_facultieshandling_id_seq', 4, true);


--
-- Name: questions_image_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.questions_image_id_seq', 13, true);


--
-- Name: questions_lesson_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.questions_lesson_id_seq', 17, true);


--
-- Name: questions_lesson_outcome_btl_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.questions_lesson_outcome_btl_id_seq', 13, true);


--
-- Name: questions_markrange_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.questions_markrange_id_seq', 8, true);


--
-- Name: questions_previousyearsqp_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.questions_previousyearsqp_id_seq', 12, true);


--
-- Name: questions_programme_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.questions_programme_id_seq', 2, true);


--
-- Name: questions_question_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.questions_question_id_seq', 227, true);


--
-- Name: questions_question_previous_years_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.questions_question_previous_years_id_seq', 34, true);


--
-- Name: questions_question_topics_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.questions_question_topics_id_seq', 34, true);


--
-- Name: questions_regulation_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.questions_regulation_id_seq', 2, true);


--
-- Name: questions_subject_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.questions_subject_id_seq', 12, true);


--
-- Name: questions_syllabus_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.questions_syllabus_id_seq', 147, true);


--
-- Name: questions_topic_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.questions_topic_id_seq', 12, true);


--
-- Name: refresh_token_refreshtoken_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.refresh_token_refreshtoken_id_seq', 301, true);


--
-- Name: users_newusers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.users_newusers_id_seq', 1, false);


--
-- Name: users_user_groups_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.users_user_groups_id_seq', 1, false);


--
-- Name: users_user_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.users_user_id_seq', 13, true);


--
-- Name: users_user_user_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: admin
--

SELECT pg_catalog.setval('public.users_user_user_permissions_id_seq', 1, false);


--
-- Name: auth_group auth_group_name_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_name_key UNIQUE (name);


--
-- Name: auth_group_permissions auth_group_permissions_group_id_permission_id_0cd325b0_uniq; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_permission_id_0cd325b0_uniq UNIQUE (group_id, permission_id);


--
-- Name: auth_group_permissions auth_group_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_pkey PRIMARY KEY (id);


--
-- Name: auth_group auth_group_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_pkey PRIMARY KEY (id);


--
-- Name: auth_permission auth_permission_content_type_id_codename_01ab375a_uniq; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_codename_01ab375a_uniq UNIQUE (content_type_id, codename);


--
-- Name: auth_permission auth_permission_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_pkey PRIMARY KEY (id);


--
-- Name: coe_coe coe_coe_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.coe_coe
    ADD CONSTRAINT coe_coe_pkey PRIMARY KEY (id);


--
-- Name: django_admin_log django_admin_log_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_pkey PRIMARY KEY (id);


--
-- Name: django_content_type django_content_type_app_label_model_76bd3d3b_uniq; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_app_label_model_76bd3d3b_uniq UNIQUE (app_label, model);


--
-- Name: django_content_type django_content_type_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_pkey PRIMARY KEY (id);


--
-- Name: django_migrations django_migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.django_migrations
    ADD CONSTRAINT django_migrations_pkey PRIMARY KEY (id);


--
-- Name: django_session django_session_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.django_session
    ADD CONSTRAINT django_session_pkey PRIMARY KEY (session_key);


--
-- Name: questions_bloomstaxonomylevel questions_bloomstaxonomylevel_name_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_bloomstaxonomylevel
    ADD CONSTRAINT questions_bloomstaxonomylevel_name_key UNIQUE (name);


--
-- Name: questions_bloomstaxonomylevel questions_bloomstaxonomylevel_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_bloomstaxonomylevel
    ADD CONSTRAINT questions_bloomstaxonomylevel_pkey PRIMARY KEY (id);


--
-- Name: questions_course questions_course_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_course
    ADD CONSTRAINT questions_course_pkey PRIMARY KEY (id);


--
-- Name: questions_course questions_course_regulation_id_semester_d_31ac6b8c_uniq; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_course
    ADD CONSTRAINT questions_course_regulation_id_semester_d_31ac6b8c_uniq UNIQUE (regulation_id, semester, department_id);


--
-- Name: questions_createsyllabus_syllabus questions_createsyllabus_createsyllabus_id_syllab_3c254676_uniq; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_createsyllabus_syllabus
    ADD CONSTRAINT questions_createsyllabus_createsyllabus_id_syllab_3c254676_uniq UNIQUE (createsyllabus_id, syllabus_id);


--
-- Name: questions_createsyllabus questions_createsyllabus_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_createsyllabus
    ADD CONSTRAINT questions_createsyllabus_pkey PRIMARY KEY (id);


--
-- Name: questions_createsyllabus_syllabus questions_createsyllabus_syllabus_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_createsyllabus_syllabus
    ADD CONSTRAINT questions_createsyllabus_syllabus_pkey PRIMARY KEY (id);


--
-- Name: questions_degree questions_degree_name_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_degree
    ADD CONSTRAINT questions_degree_name_key UNIQUE (name);


--
-- Name: questions_degree questions_degree_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_degree
    ADD CONSTRAINT questions_degree_pkey PRIMARY KEY (id);


--
-- Name: questions_department questions_department_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_department
    ADD CONSTRAINT questions_department_pkey PRIMARY KEY (id);


--
-- Name: questions_department questions_department_programme_id_degree_id_b_37abd3d0_uniq; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_department
    ADD CONSTRAINT questions_department_programme_id_degree_id_b_37abd3d0_uniq UNIQUE (programme_id, degree_id, branch_code);


--
-- Name: questions_facultieshandling_faculties questions_facultieshandl_facultieshandling_id_use_afa6dc81_uniq; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_facultieshandling_faculties
    ADD CONSTRAINT questions_facultieshandl_facultieshandling_id_use_afa6dc81_uniq UNIQUE (facultieshandling_id, user_id);


--
-- Name: questions_facultieshandling questions_facultieshandling_course_id_subject_id_0f1d101e_uniq; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_facultieshandling
    ADD CONSTRAINT questions_facultieshandling_course_id_subject_id_0f1d101e_uniq UNIQUE (course_id, subject_id);


--
-- Name: questions_facultieshandling_faculties questions_facultieshandling_faculties_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_facultieshandling_faculties
    ADD CONSTRAINT questions_facultieshandling_faculties_pkey PRIMARY KEY (id);


--
-- Name: questions_facultieshandling questions_facultieshandling_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_facultieshandling
    ADD CONSTRAINT questions_facultieshandling_pkey PRIMARY KEY (id);


--
-- Name: questions_image questions_image_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_image
    ADD CONSTRAINT questions_image_pkey PRIMARY KEY (id);


--
-- Name: questions_lesson questions_lesson_name_subject_id_e47995db_uniq; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_lesson
    ADD CONSTRAINT questions_lesson_name_subject_id_e47995db_uniq UNIQUE (name, subject_id);


--
-- Name: questions_lesson_outcome_btl questions_lesson_outcome_btl_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_lesson_outcome_btl
    ADD CONSTRAINT questions_lesson_outcome_btl_pkey PRIMARY KEY (id);


--
-- Name: questions_lesson_outcome_btl questions_lesson_outcome_lesson_id_bloomstaxonomy_4391aa95_uniq; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_lesson_outcome_btl
    ADD CONSTRAINT questions_lesson_outcome_lesson_id_bloomstaxonomy_4391aa95_uniq UNIQUE (lesson_id, bloomstaxonomylevel_id);


--
-- Name: questions_lesson questions_lesson_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_lesson
    ADD CONSTRAINT questions_lesson_pkey PRIMARY KEY (id);


--
-- Name: questions_markrange questions_markrange_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_markrange
    ADD CONSTRAINT questions_markrange_pkey PRIMARY KEY (id);


--
-- Name: questions_markrange questions_markrange_start_end_c0a9a95e_uniq; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_markrange
    ADD CONSTRAINT questions_markrange_start_end_c0a9a95e_uniq UNIQUE (start, "end");


--
-- Name: questions_previousyearsqp questions_previousyearsqp_month_year_f922aa8a_uniq; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_previousyearsqp
    ADD CONSTRAINT questions_previousyearsqp_month_year_f922aa8a_uniq UNIQUE (month, year);


--
-- Name: questions_previousyearsqp questions_previousyearsqp_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_previousyearsqp
    ADD CONSTRAINT questions_previousyearsqp_pkey PRIMARY KEY (id);


--
-- Name: questions_programme questions_programme_name_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_programme
    ADD CONSTRAINT questions_programme_name_key UNIQUE (name);


--
-- Name: questions_programme questions_programme_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_programme
    ADD CONSTRAINT questions_programme_pkey PRIMARY KEY (id);


--
-- Name: questions_question questions_question_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_question
    ADD CONSTRAINT questions_question_pkey PRIMARY KEY (id);


--
-- Name: questions_question_previous_years questions_question_previ_question_id_previousyear_af244270_uniq; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_question_previous_years
    ADD CONSTRAINT questions_question_previ_question_id_previousyear_af244270_uniq UNIQUE (question_id, previousyearsqp_id);


--
-- Name: questions_question_previous_years questions_question_previous_years_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_question_previous_years
    ADD CONSTRAINT questions_question_previous_years_pkey PRIMARY KEY (id);


--
-- Name: questions_question_topics questions_question_topics_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_question_topics
    ADD CONSTRAINT questions_question_topics_pkey PRIMARY KEY (id);


--
-- Name: questions_question_topics questions_question_topics_question_id_topic_id_85e06e0e_uniq; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_question_topics
    ADD CONSTRAINT questions_question_topics_question_id_topic_id_85e06e0e_uniq UNIQUE (question_id, topic_id);


--
-- Name: questions_regulation questions_regulation_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_regulation
    ADD CONSTRAINT questions_regulation_pkey PRIMARY KEY (id);


--
-- Name: questions_regulation questions_regulation_year_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_regulation
    ADD CONSTRAINT questions_regulation_year_key UNIQUE (year);


--
-- Name: questions_subject questions_subject_code_co_150aa859_uniq; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_subject
    ADD CONSTRAINT questions_subject_code_co_150aa859_uniq UNIQUE (code, co);


--
-- Name: questions_subject questions_subject_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_subject
    ADD CONSTRAINT questions_subject_pkey PRIMARY KEY (id);


--
-- Name: questions_syllabus questions_syllabus_course_id_lesson_id_476423de_uniq; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_syllabus
    ADD CONSTRAINT questions_syllabus_course_id_lesson_id_476423de_uniq UNIQUE (course_id, lesson_id);


--
-- Name: questions_syllabus questions_syllabus_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_syllabus
    ADD CONSTRAINT questions_syllabus_pkey PRIMARY KEY (id);


--
-- Name: questions_topic questions_topic_name_lesson_id_e1dbdc14_uniq; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_topic
    ADD CONSTRAINT questions_topic_name_lesson_id_e1dbdc14_uniq UNIQUE (name, lesson_id);


--
-- Name: questions_topic questions_topic_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_topic
    ADD CONSTRAINT questions_topic_pkey PRIMARY KEY (id);


--
-- Name: refresh_token_refreshtoken refresh_token_refreshtoken_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.refresh_token_refreshtoken
    ADD CONSTRAINT refresh_token_refreshtoken_pkey PRIMARY KEY (id);


--
-- Name: refresh_token_refreshtoken refresh_token_refreshtoken_token_revoked_b683a545_uniq; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.refresh_token_refreshtoken
    ADD CONSTRAINT refresh_token_refreshtoken_token_revoked_b683a545_uniq UNIQUE (token, revoked);


--
-- Name: users_newuser users_newuser_email_0b37614b_uniq; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.users_newuser
    ADD CONSTRAINT users_newuser_email_0b37614b_uniq UNIQUE (email);


--
-- Name: users_newuser users_newusers_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.users_newuser
    ADD CONSTRAINT users_newusers_pkey PRIMARY KEY (id);


--
-- Name: users_user users_user_email_key; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.users_user
    ADD CONSTRAINT users_user_email_key UNIQUE (email);


--
-- Name: users_user_groups users_user_groups_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.users_user_groups
    ADD CONSTRAINT users_user_groups_pkey PRIMARY KEY (id);


--
-- Name: users_user_groups users_user_groups_user_id_group_id_b88eab82_uniq; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.users_user_groups
    ADD CONSTRAINT users_user_groups_user_id_group_id_b88eab82_uniq UNIQUE (user_id, group_id);


--
-- Name: users_user users_user_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.users_user
    ADD CONSTRAINT users_user_pkey PRIMARY KEY (id);


--
-- Name: users_user_user_permissions users_user_user_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.users_user_user_permissions
    ADD CONSTRAINT users_user_user_permissions_pkey PRIMARY KEY (id);


--
-- Name: users_user_user_permissions users_user_user_permissions_user_id_permission_id_43338c45_uniq; Type: CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.users_user_user_permissions
    ADD CONSTRAINT users_user_user_permissions_user_id_permission_id_43338c45_uniq UNIQUE (user_id, permission_id);


--
-- Name: auth_group_name_a6ea08ec_like; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX auth_group_name_a6ea08ec_like ON public.auth_group USING btree (name varchar_pattern_ops);


--
-- Name: auth_group_permissions_group_id_b120cbf9; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX auth_group_permissions_group_id_b120cbf9 ON public.auth_group_permissions USING btree (group_id);


--
-- Name: auth_group_permissions_permission_id_84c5c92e; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX auth_group_permissions_permission_id_84c5c92e ON public.auth_group_permissions USING btree (permission_id);


--
-- Name: auth_permission_content_type_id_2f476e4b; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX auth_permission_content_type_id_2f476e4b ON public.auth_permission USING btree (content_type_id);


--
-- Name: coe_coe_coe_id_fc49fef7; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX coe_coe_coe_id_fc49fef7 ON public.coe_coe USING btree (coe_id);


--
-- Name: django_admin_log_content_type_id_c4bce8eb; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX django_admin_log_content_type_id_c4bce8eb ON public.django_admin_log USING btree (content_type_id);


--
-- Name: django_admin_log_user_id_c564eba6; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX django_admin_log_user_id_c564eba6 ON public.django_admin_log USING btree (user_id);


--
-- Name: django_session_expire_date_a5c62663; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX django_session_expire_date_a5c62663 ON public.django_session USING btree (expire_date);


--
-- Name: django_session_session_key_c0390e0f_like; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX django_session_session_key_c0390e0f_like ON public.django_session USING btree (session_key varchar_pattern_ops);


--
-- Name: questions_bloomstaxonomylevel_name_9bc3b939_like; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX questions_bloomstaxonomylevel_name_9bc3b939_like ON public.questions_bloomstaxonomylevel USING btree (name varchar_pattern_ops);


--
-- Name: questions_course_department_id_3740622e; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX questions_course_department_id_3740622e ON public.questions_course USING btree (department_id);


--
-- Name: questions_course_regulation_id_2d6f710b; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX questions_course_regulation_id_2d6f710b ON public.questions_course USING btree (regulation_id);


--
-- Name: questions_createsyllabus_faculty_id_5eaf8917; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX questions_createsyllabus_faculty_id_5eaf8917 ON public.questions_createsyllabus USING btree (faculty_id);


--
-- Name: questions_createsyllabus_syllabus_createsyllabus_id_690eab04; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX questions_createsyllabus_syllabus_createsyllabus_id_690eab04 ON public.questions_createsyllabus_syllabus USING btree (createsyllabus_id);


--
-- Name: questions_createsyllabus_syllabus_syllabus_id_49cbf38a; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX questions_createsyllabus_syllabus_syllabus_id_49cbf38a ON public.questions_createsyllabus_syllabus USING btree (syllabus_id);


--
-- Name: questions_degree_name_9c630f26_like; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX questions_degree_name_9c630f26_like ON public.questions_degree USING btree (name varchar_pattern_ops);


--
-- Name: questions_department_degree_id_cab07312; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX questions_department_degree_id_cab07312 ON public.questions_department USING btree (degree_id);


--
-- Name: questions_department_hod_id_30455ff6; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX questions_department_hod_id_30455ff6 ON public.questions_department USING btree (hod_id);


--
-- Name: questions_department_programme_id_fd2c0cc8; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX questions_department_programme_id_fd2c0cc8 ON public.questions_department USING btree (programme_id);


--
-- Name: questions_facultieshandlin_facultieshandling_id_8587fba4; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX questions_facultieshandlin_facultieshandling_id_8587fba4 ON public.questions_facultieshandling_faculties USING btree (facultieshandling_id);


--
-- Name: questions_facultieshandling_course_id_e7b6c974; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX questions_facultieshandling_course_id_e7b6c974 ON public.questions_facultieshandling USING btree (course_id);


--
-- Name: questions_facultieshandling_faculties_user_id_0e6191fa; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX questions_facultieshandling_faculties_user_id_0e6191fa ON public.questions_facultieshandling_faculties USING btree (user_id);


--
-- Name: questions_facultieshandling_subject_id_4a1f86a3; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX questions_facultieshandling_subject_id_4a1f86a3 ON public.questions_facultieshandling USING btree (subject_id);


--
-- Name: questions_lesson_outcome_btl_bloomstaxonomylevel_id_470071e1; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX questions_lesson_outcome_btl_bloomstaxonomylevel_id_470071e1 ON public.questions_lesson_outcome_btl USING btree (bloomstaxonomylevel_id);


--
-- Name: questions_lesson_outcome_btl_lesson_id_dc91998e; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX questions_lesson_outcome_btl_lesson_id_dc91998e ON public.questions_lesson_outcome_btl USING btree (lesson_id);


--
-- Name: questions_lesson_subject_id_a150c3b4; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX questions_lesson_subject_id_a150c3b4 ON public.questions_lesson USING btree (subject_id);


--
-- Name: questions_programme_name_de13d358_like; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX questions_programme_name_de13d358_like ON public.questions_programme USING btree (name varchar_pattern_ops);


--
-- Name: questions_question_btl_id_e1e12e83; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX questions_question_btl_id_e1e12e83 ON public.questions_question USING btree (btl_id);


--
-- Name: questions_question_created_by_id_467b105c; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX questions_question_created_by_id_467b105c ON public.questions_question USING btree (created_by_id);


--
-- Name: questions_question_lesson_id_d6223928; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX questions_question_lesson_id_d6223928 ON public.questions_question USING btree (lesson_id);


--
-- Name: questions_question_mark_id_c9f7a7cc; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX questions_question_mark_id_c9f7a7cc ON public.questions_question USING btree (mark_id);


--
-- Name: questions_question_previous_years_previousyearsqp_id_b5b53c51; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX questions_question_previous_years_previousyearsqp_id_b5b53c51 ON public.questions_question_previous_years USING btree (previousyearsqp_id);


--
-- Name: questions_question_previous_years_question_id_fc0e95a4; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX questions_question_previous_years_question_id_fc0e95a4 ON public.questions_question_previous_years USING btree (question_id);


--
-- Name: questions_question_topics_question_id_4bd7a7fd; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX questions_question_topics_question_id_4bd7a7fd ON public.questions_question_topics USING btree (question_id);


--
-- Name: questions_question_topics_topic_id_4ed74aac; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX questions_question_topics_topic_id_4ed74aac ON public.questions_question_topics USING btree (topic_id);


--
-- Name: questions_syllabus_course_id_b4b8de00; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX questions_syllabus_course_id_b4b8de00 ON public.questions_syllabus USING btree (course_id);


--
-- Name: questions_syllabus_lesson_id_f4abc7c9; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX questions_syllabus_lesson_id_f4abc7c9 ON public.questions_syllabus USING btree (lesson_id);


--
-- Name: questions_topic_lesson_id_3b2c97be; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX questions_topic_lesson_id_3b2c97be ON public.questions_topic USING btree (lesson_id);


--
-- Name: refresh_token_refreshtoken_user_id_45383307; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX refresh_token_refreshtoken_user_id_45383307 ON public.refresh_token_refreshtoken USING btree (user_id);


--
-- Name: users_newuser_email_0b37614b_like; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX users_newuser_email_0b37614b_like ON public.users_newuser USING btree (email varchar_pattern_ops);


--
-- Name: users_user_email_243f6e77_like; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX users_user_email_243f6e77_like ON public.users_user USING btree (email varchar_pattern_ops);


--
-- Name: users_user_groups_group_id_9afc8d0e; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX users_user_groups_group_id_9afc8d0e ON public.users_user_groups USING btree (group_id);


--
-- Name: users_user_groups_user_id_5f6f5a90; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX users_user_groups_user_id_5f6f5a90 ON public.users_user_groups USING btree (user_id);


--
-- Name: users_user_user_permissions_permission_id_0b93982e; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX users_user_user_permissions_permission_id_0b93982e ON public.users_user_user_permissions USING btree (permission_id);


--
-- Name: users_user_user_permissions_user_id_20aca447; Type: INDEX; Schema: public; Owner: admin
--

CREATE INDEX users_user_user_permissions_user_id_20aca447 ON public.users_user_user_permissions USING btree (user_id);


--
-- Name: auth_group_permissions auth_group_permissio_permission_id_84c5c92e_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissio_permission_id_84c5c92e_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_group_permissions auth_group_permissions_group_id_b120cbf9_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_b120cbf9_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_permission auth_permission_content_type_id_2f476e4b_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_2f476e4b_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: coe_coe coe_coe_coe_id_fc49fef7_fk_users_user_id; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.coe_coe
    ADD CONSTRAINT coe_coe_coe_id_fc49fef7_fk_users_user_id FOREIGN KEY (coe_id) REFERENCES public.users_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_admin_log django_admin_log_content_type_id_c4bce8eb_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_content_type_id_c4bce8eb_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_admin_log django_admin_log_user_id_c564eba6_fk_users_user_id; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_user_id_c564eba6_fk_users_user_id FOREIGN KEY (user_id) REFERENCES public.users_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: questions_course questions_course_department_id_3740622e_fk_questions; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_course
    ADD CONSTRAINT questions_course_department_id_3740622e_fk_questions FOREIGN KEY (department_id) REFERENCES public.questions_department(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: questions_course questions_course_regulation_id_2d6f710b_fk_questions; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_course
    ADD CONSTRAINT questions_course_regulation_id_2d6f710b_fk_questions FOREIGN KEY (regulation_id) REFERENCES public.questions_regulation(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: questions_createsyllabus_syllabus questions_createsyll_createsyllabus_id_690eab04_fk_questions; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_createsyllabus_syllabus
    ADD CONSTRAINT questions_createsyll_createsyllabus_id_690eab04_fk_questions FOREIGN KEY (createsyllabus_id) REFERENCES public.questions_createsyllabus(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: questions_createsyllabus_syllabus questions_createsyll_syllabus_id_49cbf38a_fk_questions; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_createsyllabus_syllabus
    ADD CONSTRAINT questions_createsyll_syllabus_id_49cbf38a_fk_questions FOREIGN KEY (syllabus_id) REFERENCES public.questions_syllabus(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: questions_createsyllabus questions_createsyllabus_faculty_id_5eaf8917_fk_users_user_id; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_createsyllabus
    ADD CONSTRAINT questions_createsyllabus_faculty_id_5eaf8917_fk_users_user_id FOREIGN KEY (faculty_id) REFERENCES public.users_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: questions_department questions_department_degree_id_cab07312_fk_questions_degree_id; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_department
    ADD CONSTRAINT questions_department_degree_id_cab07312_fk_questions_degree_id FOREIGN KEY (degree_id) REFERENCES public.questions_degree(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: questions_department questions_department_hod_id_30455ff6_fk_users_user_id; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_department
    ADD CONSTRAINT questions_department_hod_id_30455ff6_fk_users_user_id FOREIGN KEY (hod_id) REFERENCES public.users_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: questions_department questions_department_programme_id_fd2c0cc8_fk_questions; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_department
    ADD CONSTRAINT questions_department_programme_id_fd2c0cc8_fk_questions FOREIGN KEY (programme_id) REFERENCES public.questions_programme(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: questions_facultieshandling questions_facultiesh_course_id_e7b6c974_fk_questions; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_facultieshandling
    ADD CONSTRAINT questions_facultiesh_course_id_e7b6c974_fk_questions FOREIGN KEY (course_id) REFERENCES public.questions_course(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: questions_facultieshandling_faculties questions_facultiesh_facultieshandling_id_8587fba4_fk_questions; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_facultieshandling_faculties
    ADD CONSTRAINT questions_facultiesh_facultieshandling_id_8587fba4_fk_questions FOREIGN KEY (facultieshandling_id) REFERENCES public.questions_facultieshandling(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: questions_facultieshandling questions_facultiesh_subject_id_4a1f86a3_fk_questions; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_facultieshandling
    ADD CONSTRAINT questions_facultiesh_subject_id_4a1f86a3_fk_questions FOREIGN KEY (subject_id) REFERENCES public.questions_subject(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: questions_facultieshandling_faculties questions_facultiesh_user_id_0e6191fa_fk_users_use; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_facultieshandling_faculties
    ADD CONSTRAINT questions_facultiesh_user_id_0e6191fa_fk_users_use FOREIGN KEY (user_id) REFERENCES public.users_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: questions_lesson_outcome_btl questions_lesson_out_bloomstaxonomylevel__470071e1_fk_questions; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_lesson_outcome_btl
    ADD CONSTRAINT questions_lesson_out_bloomstaxonomylevel__470071e1_fk_questions FOREIGN KEY (bloomstaxonomylevel_id) REFERENCES public.questions_bloomstaxonomylevel(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: questions_lesson_outcome_btl questions_lesson_out_lesson_id_dc91998e_fk_questions; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_lesson_outcome_btl
    ADD CONSTRAINT questions_lesson_out_lesson_id_dc91998e_fk_questions FOREIGN KEY (lesson_id) REFERENCES public.questions_lesson(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: questions_lesson questions_lesson_subject_id_a150c3b4_fk_questions_subject_id; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_lesson
    ADD CONSTRAINT questions_lesson_subject_id_a150c3b4_fk_questions_subject_id FOREIGN KEY (subject_id) REFERENCES public.questions_subject(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: questions_question questions_question_btl_id_e1e12e83_fk_questions; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_question
    ADD CONSTRAINT questions_question_btl_id_e1e12e83_fk_questions FOREIGN KEY (btl_id) REFERENCES public.questions_bloomstaxonomylevel(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: questions_question questions_question_created_by_id_467b105c_fk_users_user_id; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_question
    ADD CONSTRAINT questions_question_created_by_id_467b105c_fk_users_user_id FOREIGN KEY (created_by_id) REFERENCES public.users_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: questions_question questions_question_lesson_id_d6223928_fk_questions_lesson_id; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_question
    ADD CONSTRAINT questions_question_lesson_id_d6223928_fk_questions_lesson_id FOREIGN KEY (lesson_id) REFERENCES public.questions_lesson(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: questions_question questions_question_mark_id_c9f7a7cc_fk_questions_markrange_id; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_question
    ADD CONSTRAINT questions_question_mark_id_c9f7a7cc_fk_questions_markrange_id FOREIGN KEY (mark_id) REFERENCES public.questions_markrange(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: questions_question_previous_years questions_question_p_previousyearsqp_id_b5b53c51_fk_questions; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_question_previous_years
    ADD CONSTRAINT questions_question_p_previousyearsqp_id_b5b53c51_fk_questions FOREIGN KEY (previousyearsqp_id) REFERENCES public.questions_previousyearsqp(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: questions_question_previous_years questions_question_p_question_id_fc0e95a4_fk_questions; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_question_previous_years
    ADD CONSTRAINT questions_question_p_question_id_fc0e95a4_fk_questions FOREIGN KEY (question_id) REFERENCES public.questions_question(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: questions_question_topics questions_question_t_question_id_4bd7a7fd_fk_questions; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_question_topics
    ADD CONSTRAINT questions_question_t_question_id_4bd7a7fd_fk_questions FOREIGN KEY (question_id) REFERENCES public.questions_question(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: questions_question_topics questions_question_t_topic_id_4ed74aac_fk_questions; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_question_topics
    ADD CONSTRAINT questions_question_t_topic_id_4ed74aac_fk_questions FOREIGN KEY (topic_id) REFERENCES public.questions_topic(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: questions_syllabus questions_syllabus_course_id_b4b8de00_fk_questions_course_id; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_syllabus
    ADD CONSTRAINT questions_syllabus_course_id_b4b8de00_fk_questions_course_id FOREIGN KEY (course_id) REFERENCES public.questions_course(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: questions_syllabus questions_syllabus_lesson_id_f4abc7c9_fk_questions_lesson_id; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_syllabus
    ADD CONSTRAINT questions_syllabus_lesson_id_f4abc7c9_fk_questions_lesson_id FOREIGN KEY (lesson_id) REFERENCES public.questions_lesson(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: questions_topic questions_topic_lesson_id_3b2c97be_fk_questions_lesson_id; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.questions_topic
    ADD CONSTRAINT questions_topic_lesson_id_3b2c97be_fk_questions_lesson_id FOREIGN KEY (lesson_id) REFERENCES public.questions_lesson(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: refresh_token_refreshtoken refresh_token_refreshtoken_user_id_45383307_fk_users_user_id; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.refresh_token_refreshtoken
    ADD CONSTRAINT refresh_token_refreshtoken_user_id_45383307_fk_users_user_id FOREIGN KEY (user_id) REFERENCES public.users_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: users_user_groups users_user_groups_group_id_9afc8d0e_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.users_user_groups
    ADD CONSTRAINT users_user_groups_group_id_9afc8d0e_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: users_user_groups users_user_groups_user_id_5f6f5a90_fk_users_user_id; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.users_user_groups
    ADD CONSTRAINT users_user_groups_user_id_5f6f5a90_fk_users_user_id FOREIGN KEY (user_id) REFERENCES public.users_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: users_user_user_permissions users_user_user_perm_permission_id_0b93982e_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.users_user_user_permissions
    ADD CONSTRAINT users_user_user_perm_permission_id_0b93982e_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: users_user_user_permissions users_user_user_permissions_user_id_20aca447_fk_users_user_id; Type: FK CONSTRAINT; Schema: public; Owner: admin
--

ALTER TABLE ONLY public.users_user_user_permissions
    ADD CONSTRAINT users_user_user_permissions_user_id_20aca447_fk_users_user_id FOREIGN KEY (user_id) REFERENCES public.users_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- PostgreSQL database dump complete
--

